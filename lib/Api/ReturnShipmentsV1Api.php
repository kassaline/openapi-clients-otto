<?php
/**
 * ReturnShipmentsV1Api
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Otto\ApiException;
use OpenAPI\Client\Otto\Configuration;
use OpenAPI\Client\Otto\HeaderSelector;
use OpenAPI\Client\Otto\ObjectSerializer;

/**
 * ReturnShipmentsV1Api Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReturnShipmentsV1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'returnShipmentsV1ListReturnShipmentsUsingGET' => [
            'application/json',
        ],
        'returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET' => [
            'application/json',
        ],
        'returnShipmentsV1ReturnShipmentUsingGET' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation returnShipmentsV1ListReturnShipmentsUsingGET
     *
     * Retrieve returnShipments.
     *
     * @param  \DateTime $datefrom ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC. (required)
     * @param  int|null $limit The maximum number of returnShipments to be returned in each response. (optional, default to 25)
     * @param  string|null $next The cursor which points to the next returnShipment that should be queried. It is used to paginate the results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ListReturnShipmentsUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Otto\Model\ReturnShipmentListReturnShipmentsV1|\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentListReturnShipmentsV1
     */
    public function returnShipmentsV1ListReturnShipmentsUsingGET($datefrom, $limit = 25, $next = null, string $contentType = self::contentTypes['returnShipmentsV1ListReturnShipmentsUsingGET'][0])
    {
        list($response) = $this->returnShipmentsV1ListReturnShipmentsUsingGETWithHttpInfo($datefrom, $limit, $next, $contentType);
        return $response;
    }

    /**
     * Operation returnShipmentsV1ListReturnShipmentsUsingGETWithHttpInfo
     *
     * Retrieve returnShipments.
     *
     * @param  \DateTime $datefrom ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC. (required)
     * @param  int|null $limit The maximum number of returnShipments to be returned in each response. (optional, default to 25)
     * @param  string|null $next The cursor which points to the next returnShipment that should be queried. It is used to paginate the results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ListReturnShipmentsUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Otto\Model\ReturnShipmentListReturnShipmentsV1|\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentListReturnShipmentsV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnShipmentsV1ListReturnShipmentsUsingGETWithHttpInfo($datefrom, $limit = 25, $next = null, string $contentType = self::contentTypes['returnShipmentsV1ListReturnShipmentsUsingGET'][0])
    {
        $request = $this->returnShipmentsV1ListReturnShipmentsUsingGETRequest($datefrom, $limit, $next, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Otto\Model\ReturnShipmentListReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ReturnShipmentListReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ReturnShipmentListReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentListReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentListReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentListReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Otto\Model\ReturnShipmentListReturnShipmentsV1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ReturnShipmentListReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentListReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnShipmentsV1ListReturnShipmentsUsingGETAsync
     *
     * Retrieve returnShipments.
     *
     * @param  \DateTime $datefrom ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC. (required)
     * @param  int|null $limit The maximum number of returnShipments to be returned in each response. (optional, default to 25)
     * @param  string|null $next The cursor which points to the next returnShipment that should be queried. It is used to paginate the results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ListReturnShipmentsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ListReturnShipmentsUsingGETAsync($datefrom, $limit = 25, $next = null, string $contentType = self::contentTypes['returnShipmentsV1ListReturnShipmentsUsingGET'][0])
    {
        return $this->returnShipmentsV1ListReturnShipmentsUsingGETAsyncWithHttpInfo($datefrom, $limit, $next, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnShipmentsV1ListReturnShipmentsUsingGETAsyncWithHttpInfo
     *
     * Retrieve returnShipments.
     *
     * @param  \DateTime $datefrom ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC. (required)
     * @param  int|null $limit The maximum number of returnShipments to be returned in each response. (optional, default to 25)
     * @param  string|null $next The cursor which points to the next returnShipment that should be queried. It is used to paginate the results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ListReturnShipmentsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ListReturnShipmentsUsingGETAsyncWithHttpInfo($datefrom, $limit = 25, $next = null, string $contentType = self::contentTypes['returnShipmentsV1ListReturnShipmentsUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Otto\Model\ReturnShipmentListReturnShipmentsV1';
        $request = $this->returnShipmentsV1ListReturnShipmentsUsingGETRequest($datefrom, $limit, $next, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnShipmentsV1ListReturnShipmentsUsingGET'
     *
     * @param  \DateTime $datefrom ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC. (required)
     * @param  int|null $limit The maximum number of returnShipments to be returned in each response. (optional, default to 25)
     * @param  string|null $next The cursor which points to the next returnShipment that should be queried. It is used to paginate the results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ListReturnShipmentsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnShipmentsV1ListReturnShipmentsUsingGETRequest($datefrom, $limit = 25, $next = null, string $contentType = self::contentTypes['returnShipmentsV1ListReturnShipmentsUsingGET'][0])
    {

        // verify the required parameter 'datefrom' is set
        if ($datefrom === null || (is_array($datefrom) && count($datefrom) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $datefrom when calling returnShipmentsV1ListReturnShipmentsUsingGET'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ReturnShipmentsV1Api.returnShipmentsV1ListReturnShipmentsUsingGET, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ReturnShipmentsV1Api.returnShipmentsV1ListReturnShipmentsUsingGET, must be bigger than or equal to 1.');
        }



        $resourcePath = '/v1/return-shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datefrom,
            'datefrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next,
            'next', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET
     *
     * Retrieve returnShipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the returnShipment. (required)
     * @param  string $trackingNumber The tracking number of the returnShipment assigned by the carrier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1|\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByTrackingNumberReturnShipmentsV1|\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByTrackingNumberReturnShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByTrackingNumberReturnShipmentsV1
     */
    public function returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET($carrier, $trackingNumber, string $contentType = self::contentTypes['returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'][0])
    {
        list($response) = $this->returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo($carrier, $trackingNumber, $contentType);
        return $response;
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo
     *
     * Retrieve returnShipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the returnShipment. (required)
     * @param  string $trackingNumber The tracking number of the returnShipment assigned by the carrier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1|\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByTrackingNumberReturnShipmentsV1|\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByTrackingNumberReturnShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByTrackingNumberReturnShipmentsV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo($carrier, $trackingNumber, string $contentType = self::contentTypes['returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'][0])
    {
        $request = $this->returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $trackingNumber, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByTrackingNumberReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByTrackingNumberReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByTrackingNumberReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByTrackingNumberReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByTrackingNumberReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByTrackingNumberReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByTrackingNumberReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByTrackingNumberReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByTrackingNumberReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByTrackingNumberReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByTrackingNumberReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByTrackingNumberReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETAsync
     *
     * Retrieve returnShipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the returnShipment. (required)
     * @param  string $trackingNumber The tracking number of the returnShipment assigned by the carrier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETAsync($carrier, $trackingNumber, string $contentType = self::contentTypes['returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'][0])
    {
        return $this->returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo($carrier, $trackingNumber, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo
     *
     * Retrieve returnShipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the returnShipment. (required)
     * @param  string $trackingNumber The tracking number of the returnShipment assigned by the carrier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo($carrier, $trackingNumber, string $contentType = self::contentTypes['returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1';
        $request = $this->returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $trackingNumber, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'
     *
     * @param  string $carrier The carrier of the returnShipment. (required)
     * @param  string $trackingNumber The tracking number of the returnShipment assigned by the carrier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $trackingNumber, string $contentType = self::contentTypes['returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'][0])
    {

        // verify the required parameter 'carrier' is set
        if ($carrier === null || (is_array($carrier) && count($carrier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier when calling returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'
            );
        }

        // verify the required parameter 'trackingNumber' is set
        if ($trackingNumber === null || (is_array($trackingNumber) && count($trackingNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingNumber when calling returnShipmentsV1ReturnShipmentByCarrierAndTrackingNumberUsingGET'
            );
        }


        $resourcePath = '/v1/return-shipments/carriers/{carrier}/trackingnumbers/{trackingNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($carrier !== null) {
            $resourcePath = str_replace(
                '{' . 'carrier' . '}',
                ObjectSerializer::toPathValue($carrier),
                $resourcePath
            );
        }
        // path params
        if ($trackingNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'trackingNumber' . '}',
                ObjectSerializer::toPathValue($trackingNumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentUsingGET
     *
     * Retrieve returnShipments by returnShipment ID.
     *
     * @param  string $returnShipmentId Internal return shipment identifier assigned by OTTO Market. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ReturnShipmentUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1|\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByReturnShipmentIdReturnShipmentsV1|\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByReturnShipmentIdReturnShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByReturnShipmentIdReturnShipmentsV1
     */
    public function returnShipmentsV1ReturnShipmentUsingGET($returnShipmentId, string $contentType = self::contentTypes['returnShipmentsV1ReturnShipmentUsingGET'][0])
    {
        list($response) = $this->returnShipmentsV1ReturnShipmentUsingGETWithHttpInfo($returnShipmentId, $contentType);
        return $response;
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentUsingGETWithHttpInfo
     *
     * Retrieve returnShipments by returnShipment ID.
     *
     * @param  string $returnShipmentId Internal return shipment identifier assigned by OTTO Market. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ReturnShipmentUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1|\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByReturnShipmentIdReturnShipmentsV1|\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByReturnShipmentIdReturnShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByReturnShipmentIdReturnShipmentsV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnShipmentsV1ReturnShipmentUsingGETWithHttpInfo($returnShipmentId, string $contentType = self::contentTypes['returnShipmentsV1ReturnShipmentUsingGET'][0])
    {
        $request = $this->returnShipmentsV1ReturnShipmentUsingGETRequest($returnShipmentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByReturnShipmentIdReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByReturnShipmentIdReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByReturnShipmentIdReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByReturnShipmentIdReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByReturnShipmentIdReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByReturnShipmentIdReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByReturnShipmentIdReturnShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByReturnShipmentIdReturnShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByReturnShipmentIdReturnShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\BadRequestReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ForbiddenGetReturnShipmentByReturnShipmentIdReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\NotFoundGetReturnShipmentByReturnShipmentIdReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\InternalServerErrorGetReturnShipmentByReturnShipmentIdReturnShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentUsingGETAsync
     *
     * Retrieve returnShipments by returnShipment ID.
     *
     * @param  string $returnShipmentId Internal return shipment identifier assigned by OTTO Market. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ReturnShipmentUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ReturnShipmentUsingGETAsync($returnShipmentId, string $contentType = self::contentTypes['returnShipmentsV1ReturnShipmentUsingGET'][0])
    {
        return $this->returnShipmentsV1ReturnShipmentUsingGETAsyncWithHttpInfo($returnShipmentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnShipmentsV1ReturnShipmentUsingGETAsyncWithHttpInfo
     *
     * Retrieve returnShipments by returnShipment ID.
     *
     * @param  string $returnShipmentId Internal return shipment identifier assigned by OTTO Market. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ReturnShipmentUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnShipmentsV1ReturnShipmentUsingGETAsyncWithHttpInfo($returnShipmentId, string $contentType = self::contentTypes['returnShipmentsV1ReturnShipmentUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Otto\Model\ReturnShipmentReturnShipmentsV1';
        $request = $this->returnShipmentsV1ReturnShipmentUsingGETRequest($returnShipmentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnShipmentsV1ReturnShipmentUsingGET'
     *
     * @param  string $returnShipmentId Internal return shipment identifier assigned by OTTO Market. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnShipmentsV1ReturnShipmentUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnShipmentsV1ReturnShipmentUsingGETRequest($returnShipmentId, string $contentType = self::contentTypes['returnShipmentsV1ReturnShipmentUsingGET'][0])
    {

        // verify the required parameter 'returnShipmentId' is set
        if ($returnShipmentId === null || (is_array($returnShipmentId) && count($returnShipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $returnShipmentId when calling returnShipmentsV1ReturnShipmentUsingGET'
            );
        }


        $resourcePath = '/v1/return-shipments/{returnShipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($returnShipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'returnShipmentId' . '}',
                ObjectSerializer::toPathValue($returnShipmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
