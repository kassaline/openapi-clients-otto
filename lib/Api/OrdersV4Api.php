<?php
/**
 * OrdersV4Api
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Otto\ApiException;
use OpenAPI\Client\Otto\Configuration;
use OpenAPI\Client\Otto\HeaderSelector;
use OpenAPI\Client\Otto\ObjectSerializer;

/**
 * OrdersV4Api Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersV4Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'ordersV4CancelPartnerOrderPositionItems' => [
            'application/json',
        ],
        'ordersV4CancelPartnerOrders' => [
            'application/json',
        ],
        'ordersV4FindPartnerOrders' => [
            'application/json',
        ],
        'ordersV4GetPartnerOrderByOrderNumber' => [
            'application/json',
        ],
        'ordersV4GetPartnerOrderBySalesOrderId' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation ordersV4CancelPartnerOrderPositionItems
     *
     * Cancel specific position items of an order
     *
     * @param  string $salesOrderId The salesOrderId of the order (required)
     * @param  string[] $positionItemIds The positionItemIds of the order to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4CancelPartnerOrderPositionItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function ordersV4CancelPartnerOrderPositionItems($salesOrderId, $positionItemIds, string $contentType = self::contentTypes['ordersV4CancelPartnerOrderPositionItems'][0])
    {
        $this->ordersV4CancelPartnerOrderPositionItemsWithHttpInfo($salesOrderId, $positionItemIds, $contentType);
    }

    /**
     * Operation ordersV4CancelPartnerOrderPositionItemsWithHttpInfo
     *
     * Cancel specific position items of an order
     *
     * @param  string $salesOrderId The salesOrderId of the order (required)
     * @param  string[] $positionItemIds The positionItemIds of the order to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4CancelPartnerOrderPositionItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersV4CancelPartnerOrderPositionItemsWithHttpInfo($salesOrderId, $positionItemIds, string $contentType = self::contentTypes['ordersV4CancelPartnerOrderPositionItems'][0])
    {
        $request = $this->ordersV4CancelPartnerOrderPositionItemsRequest($salesOrderId, $positionItemIds, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation ordersV4CancelPartnerOrderPositionItemsAsync
     *
     * Cancel specific position items of an order
     *
     * @param  string $salesOrderId The salesOrderId of the order (required)
     * @param  string[] $positionItemIds The positionItemIds of the order to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4CancelPartnerOrderPositionItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersV4CancelPartnerOrderPositionItemsAsync($salesOrderId, $positionItemIds, string $contentType = self::contentTypes['ordersV4CancelPartnerOrderPositionItems'][0])
    {
        return $this->ordersV4CancelPartnerOrderPositionItemsAsyncWithHttpInfo($salesOrderId, $positionItemIds, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersV4CancelPartnerOrderPositionItemsAsyncWithHttpInfo
     *
     * Cancel specific position items of an order
     *
     * @param  string $salesOrderId The salesOrderId of the order (required)
     * @param  string[] $positionItemIds The positionItemIds of the order to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4CancelPartnerOrderPositionItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersV4CancelPartnerOrderPositionItemsAsyncWithHttpInfo($salesOrderId, $positionItemIds, string $contentType = self::contentTypes['ordersV4CancelPartnerOrderPositionItems'][0])
    {
        $returnType = '';
        $request = $this->ordersV4CancelPartnerOrderPositionItemsRequest($salesOrderId, $positionItemIds, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersV4CancelPartnerOrderPositionItems'
     *
     * @param  string $salesOrderId The salesOrderId of the order (required)
     * @param  string[] $positionItemIds The positionItemIds of the order to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4CancelPartnerOrderPositionItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersV4CancelPartnerOrderPositionItemsRequest($salesOrderId, $positionItemIds, string $contentType = self::contentTypes['ordersV4CancelPartnerOrderPositionItems'][0])
    {

        // verify the required parameter 'salesOrderId' is set
        if ($salesOrderId === null || (is_array($salesOrderId) && count($salesOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $salesOrderId when calling ordersV4CancelPartnerOrderPositionItems'
            );
        }

        // verify the required parameter 'positionItemIds' is set
        if ($positionItemIds === null || (is_array($positionItemIds) && count($positionItemIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $positionItemIds when calling ordersV4CancelPartnerOrderPositionItems'
            );
        }


        $resourcePath = '/v4/orders/{salesOrderId}/positionItems/{positionItemIds}/cancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($salesOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'salesOrderId' . '}',
                ObjectSerializer::toPathValue($salesOrderId),
                $resourcePath
            );
        }
        // path params
        if (is_array($positionItemIds)) {
            $positionItemIds = ObjectSerializer::serializeCollection($positionItemIds, 'csv');
        }
        if ($positionItemIds !== null) {
            $resourcePath = str_replace(
                '{' . 'positionItemIds' . '}',
                ObjectSerializer::toPathValue($positionItemIds),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersV4CancelPartnerOrders
     *
     * Cancel all position items of an order
     *
     * @param  string[] $salesOrderId The salesOrderIds of the orders to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4CancelPartnerOrders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function ordersV4CancelPartnerOrders($salesOrderId, string $contentType = self::contentTypes['ordersV4CancelPartnerOrders'][0])
    {
        $this->ordersV4CancelPartnerOrdersWithHttpInfo($salesOrderId, $contentType);
    }

    /**
     * Operation ordersV4CancelPartnerOrdersWithHttpInfo
     *
     * Cancel all position items of an order
     *
     * @param  string[] $salesOrderId The salesOrderIds of the orders to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4CancelPartnerOrders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersV4CancelPartnerOrdersWithHttpInfo($salesOrderId, string $contentType = self::contentTypes['ordersV4CancelPartnerOrders'][0])
    {
        $request = $this->ordersV4CancelPartnerOrdersRequest($salesOrderId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation ordersV4CancelPartnerOrdersAsync
     *
     * Cancel all position items of an order
     *
     * @param  string[] $salesOrderId The salesOrderIds of the orders to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4CancelPartnerOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersV4CancelPartnerOrdersAsync($salesOrderId, string $contentType = self::contentTypes['ordersV4CancelPartnerOrders'][0])
    {
        return $this->ordersV4CancelPartnerOrdersAsyncWithHttpInfo($salesOrderId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersV4CancelPartnerOrdersAsyncWithHttpInfo
     *
     * Cancel all position items of an order
     *
     * @param  string[] $salesOrderId The salesOrderIds of the orders to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4CancelPartnerOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersV4CancelPartnerOrdersAsyncWithHttpInfo($salesOrderId, string $contentType = self::contentTypes['ordersV4CancelPartnerOrders'][0])
    {
        $returnType = '';
        $request = $this->ordersV4CancelPartnerOrdersRequest($salesOrderId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersV4CancelPartnerOrders'
     *
     * @param  string[] $salesOrderId The salesOrderIds of the orders to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4CancelPartnerOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersV4CancelPartnerOrdersRequest($salesOrderId, string $contentType = self::contentTypes['ordersV4CancelPartnerOrders'][0])
    {

        // verify the required parameter 'salesOrderId' is set
        if ($salesOrderId === null || (is_array($salesOrderId) && count($salesOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $salesOrderId when calling ordersV4CancelPartnerOrders'
            );
        }


        $resourcePath = '/v4/orders/{salesOrderId}/cancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if (is_array($salesOrderId)) {
            $salesOrderId = ObjectSerializer::serializeCollection($salesOrderId, 'csv');
        }
        if ($salesOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'salesOrderId' . '}',
                ObjectSerializer::toPathValue($salesOrderId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersV4FindPartnerOrders
     *
     * List of orders filtered by fulfillment state
     *
     * @param  string|null $fromDate Defines earliest change date (ISO 8601) the returned orders should have (optional)
     * @param  string|null $fromOrderDate Only orders newer than the date specified (ISO 8601) will be returned (optional)
     * @param  string|null $toOrderDate Only orders older than the date specified (ISO 8601) will be returned (optional)
     * @param  string|null $fulfillmentStatus &lt;br&gt;ANNOUNCED: Orders with at least one position item in state ANNOUNCED&lt;br&gt;PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED&lt;br&gt;SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE&lt;br&gt;RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT&lt;br&gt;CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER&lt;br&gt;CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE&lt;br&gt;&lt;br&gt;If no state is provided, orders in all possible states are returned.&lt;br&gt;Several values can be passed; it will return a combination of these states without duplicates.&lt;br&gt;Also see parameter &#39;mode&#39;. (optional)
     * @param  int|null $limit The maximum amount of orders to return (optional, default to 128)
     * @param  string|null $orderDirection Sort result by &#39;orderColumnType&#39; in ASCending or DESCending order (optional, default to 'ASC')
     * @param  string|null $orderColumnType The column on which to apply &#39;orderDirection&#39; parameter (optional, default to 'ORDER_LIFECYCLE_DATE')
     * @param  string|null $mode In search mode AT_LEAST_ONE orders with at least one  position item in given &#39;fulfillmentStatus&#39; will always be returned (optional, default to 'BUCKET')
     * @param  string|null $nextcursor Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is &#39;limit&#39;&lt;br&gt;&lt;br&gt;Note: Only the cursor string is required - not the whole link (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4FindPartnerOrders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Otto\Model\PartnerOrderListOrdersV4
     */
    public function ordersV4FindPartnerOrders($fromDate = null, $fromOrderDate = null, $toOrderDate = null, $fulfillmentStatus = null, $limit = 128, $orderDirection = 'ASC', $orderColumnType = 'ORDER_LIFECYCLE_DATE', $mode = 'BUCKET', $nextcursor = null, string $contentType = self::contentTypes['ordersV4FindPartnerOrders'][0])
    {
        list($response) = $this->ordersV4FindPartnerOrdersWithHttpInfo($fromDate, $fromOrderDate, $toOrderDate, $fulfillmentStatus, $limit, $orderDirection, $orderColumnType, $mode, $nextcursor, $contentType);
        return $response;
    }

    /**
     * Operation ordersV4FindPartnerOrdersWithHttpInfo
     *
     * List of orders filtered by fulfillment state
     *
     * @param  string|null $fromDate Defines earliest change date (ISO 8601) the returned orders should have (optional)
     * @param  string|null $fromOrderDate Only orders newer than the date specified (ISO 8601) will be returned (optional)
     * @param  string|null $toOrderDate Only orders older than the date specified (ISO 8601) will be returned (optional)
     * @param  string|null $fulfillmentStatus &lt;br&gt;ANNOUNCED: Orders with at least one position item in state ANNOUNCED&lt;br&gt;PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED&lt;br&gt;SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE&lt;br&gt;RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT&lt;br&gt;CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER&lt;br&gt;CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE&lt;br&gt;&lt;br&gt;If no state is provided, orders in all possible states are returned.&lt;br&gt;Several values can be passed; it will return a combination of these states without duplicates.&lt;br&gt;Also see parameter &#39;mode&#39;. (optional)
     * @param  int|null $limit The maximum amount of orders to return (optional, default to 128)
     * @param  string|null $orderDirection Sort result by &#39;orderColumnType&#39; in ASCending or DESCending order (optional, default to 'ASC')
     * @param  string|null $orderColumnType The column on which to apply &#39;orderDirection&#39; parameter (optional, default to 'ORDER_LIFECYCLE_DATE')
     * @param  string|null $mode In search mode AT_LEAST_ONE orders with at least one  position item in given &#39;fulfillmentStatus&#39; will always be returned (optional, default to 'BUCKET')
     * @param  string|null $nextcursor Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is &#39;limit&#39;&lt;br&gt;&lt;br&gt;Note: Only the cursor string is required - not the whole link (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4FindPartnerOrders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Otto\Model\PartnerOrderListOrdersV4, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersV4FindPartnerOrdersWithHttpInfo($fromDate = null, $fromOrderDate = null, $toOrderDate = null, $fulfillmentStatus = null, $limit = 128, $orderDirection = 'ASC', $orderColumnType = 'ORDER_LIFECYCLE_DATE', $mode = 'BUCKET', $nextcursor = null, string $contentType = self::contentTypes['ordersV4FindPartnerOrders'][0])
    {
        $request = $this->ordersV4FindPartnerOrdersRequest($fromDate, $fromOrderDate, $toOrderDate, $fulfillmentStatus, $limit, $orderDirection, $orderColumnType, $mode, $nextcursor, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Otto\Model\PartnerOrderListOrdersV4' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\PartnerOrderListOrdersV4' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\PartnerOrderListOrdersV4', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Otto\Model\PartnerOrderListOrdersV4';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\PartnerOrderListOrdersV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersV4FindPartnerOrdersAsync
     *
     * List of orders filtered by fulfillment state
     *
     * @param  string|null $fromDate Defines earliest change date (ISO 8601) the returned orders should have (optional)
     * @param  string|null $fromOrderDate Only orders newer than the date specified (ISO 8601) will be returned (optional)
     * @param  string|null $toOrderDate Only orders older than the date specified (ISO 8601) will be returned (optional)
     * @param  string|null $fulfillmentStatus &lt;br&gt;ANNOUNCED: Orders with at least one position item in state ANNOUNCED&lt;br&gt;PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED&lt;br&gt;SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE&lt;br&gt;RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT&lt;br&gt;CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER&lt;br&gt;CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE&lt;br&gt;&lt;br&gt;If no state is provided, orders in all possible states are returned.&lt;br&gt;Several values can be passed; it will return a combination of these states without duplicates.&lt;br&gt;Also see parameter &#39;mode&#39;. (optional)
     * @param  int|null $limit The maximum amount of orders to return (optional, default to 128)
     * @param  string|null $orderDirection Sort result by &#39;orderColumnType&#39; in ASCending or DESCending order (optional, default to 'ASC')
     * @param  string|null $orderColumnType The column on which to apply &#39;orderDirection&#39; parameter (optional, default to 'ORDER_LIFECYCLE_DATE')
     * @param  string|null $mode In search mode AT_LEAST_ONE orders with at least one  position item in given &#39;fulfillmentStatus&#39; will always be returned (optional, default to 'BUCKET')
     * @param  string|null $nextcursor Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is &#39;limit&#39;&lt;br&gt;&lt;br&gt;Note: Only the cursor string is required - not the whole link (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4FindPartnerOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersV4FindPartnerOrdersAsync($fromDate = null, $fromOrderDate = null, $toOrderDate = null, $fulfillmentStatus = null, $limit = 128, $orderDirection = 'ASC', $orderColumnType = 'ORDER_LIFECYCLE_DATE', $mode = 'BUCKET', $nextcursor = null, string $contentType = self::contentTypes['ordersV4FindPartnerOrders'][0])
    {
        return $this->ordersV4FindPartnerOrdersAsyncWithHttpInfo($fromDate, $fromOrderDate, $toOrderDate, $fulfillmentStatus, $limit, $orderDirection, $orderColumnType, $mode, $nextcursor, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersV4FindPartnerOrdersAsyncWithHttpInfo
     *
     * List of orders filtered by fulfillment state
     *
     * @param  string|null $fromDate Defines earliest change date (ISO 8601) the returned orders should have (optional)
     * @param  string|null $fromOrderDate Only orders newer than the date specified (ISO 8601) will be returned (optional)
     * @param  string|null $toOrderDate Only orders older than the date specified (ISO 8601) will be returned (optional)
     * @param  string|null $fulfillmentStatus &lt;br&gt;ANNOUNCED: Orders with at least one position item in state ANNOUNCED&lt;br&gt;PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED&lt;br&gt;SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE&lt;br&gt;RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT&lt;br&gt;CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER&lt;br&gt;CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE&lt;br&gt;&lt;br&gt;If no state is provided, orders in all possible states are returned.&lt;br&gt;Several values can be passed; it will return a combination of these states without duplicates.&lt;br&gt;Also see parameter &#39;mode&#39;. (optional)
     * @param  int|null $limit The maximum amount of orders to return (optional, default to 128)
     * @param  string|null $orderDirection Sort result by &#39;orderColumnType&#39; in ASCending or DESCending order (optional, default to 'ASC')
     * @param  string|null $orderColumnType The column on which to apply &#39;orderDirection&#39; parameter (optional, default to 'ORDER_LIFECYCLE_DATE')
     * @param  string|null $mode In search mode AT_LEAST_ONE orders with at least one  position item in given &#39;fulfillmentStatus&#39; will always be returned (optional, default to 'BUCKET')
     * @param  string|null $nextcursor Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is &#39;limit&#39;&lt;br&gt;&lt;br&gt;Note: Only the cursor string is required - not the whole link (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4FindPartnerOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersV4FindPartnerOrdersAsyncWithHttpInfo($fromDate = null, $fromOrderDate = null, $toOrderDate = null, $fulfillmentStatus = null, $limit = 128, $orderDirection = 'ASC', $orderColumnType = 'ORDER_LIFECYCLE_DATE', $mode = 'BUCKET', $nextcursor = null, string $contentType = self::contentTypes['ordersV4FindPartnerOrders'][0])
    {
        $returnType = '\OpenAPI\Client\Otto\Model\PartnerOrderListOrdersV4';
        $request = $this->ordersV4FindPartnerOrdersRequest($fromDate, $fromOrderDate, $toOrderDate, $fulfillmentStatus, $limit, $orderDirection, $orderColumnType, $mode, $nextcursor, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersV4FindPartnerOrders'
     *
     * @param  string|null $fromDate Defines earliest change date (ISO 8601) the returned orders should have (optional)
     * @param  string|null $fromOrderDate Only orders newer than the date specified (ISO 8601) will be returned (optional)
     * @param  string|null $toOrderDate Only orders older than the date specified (ISO 8601) will be returned (optional)
     * @param  string|null $fulfillmentStatus &lt;br&gt;ANNOUNCED: Orders with at least one position item in state ANNOUNCED&lt;br&gt;PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED&lt;br&gt;SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE&lt;br&gt;RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT&lt;br&gt;CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER&lt;br&gt;CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE&lt;br&gt;&lt;br&gt;If no state is provided, orders in all possible states are returned.&lt;br&gt;Several values can be passed; it will return a combination of these states without duplicates.&lt;br&gt;Also see parameter &#39;mode&#39;. (optional)
     * @param  int|null $limit The maximum amount of orders to return (optional, default to 128)
     * @param  string|null $orderDirection Sort result by &#39;orderColumnType&#39; in ASCending or DESCending order (optional, default to 'ASC')
     * @param  string|null $orderColumnType The column on which to apply &#39;orderDirection&#39; parameter (optional, default to 'ORDER_LIFECYCLE_DATE')
     * @param  string|null $mode In search mode AT_LEAST_ONE orders with at least one  position item in given &#39;fulfillmentStatus&#39; will always be returned (optional, default to 'BUCKET')
     * @param  string|null $nextcursor Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is &#39;limit&#39;&lt;br&gt;&lt;br&gt;Note: Only the cursor string is required - not the whole link (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4FindPartnerOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersV4FindPartnerOrdersRequest($fromDate = null, $fromOrderDate = null, $toOrderDate = null, $fulfillmentStatus = null, $limit = 128, $orderDirection = 'ASC', $orderColumnType = 'ORDER_LIFECYCLE_DATE', $mode = 'BUCKET', $nextcursor = null, string $contentType = self::contentTypes['ordersV4FindPartnerOrders'][0])
    {











        $resourcePath = '/v4/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromDate,
            'fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fromOrderDate,
            'fromOrderDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $toOrderDate,
            'toOrderDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillmentStatus,
            'fulfillmentStatus', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderDirection,
            'orderDirection', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderColumnType,
            'orderColumnType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mode,
            'mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nextcursor,
            'nextcursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersV4GetPartnerOrderByOrderNumber
     *
     * Get an order via order number
     *
     * @param  string $orderNumber orderNumber (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4GetPartnerOrderByOrderNumber'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4
     */
    public function ordersV4GetPartnerOrderByOrderNumber($orderNumber, string $contentType = self::contentTypes['ordersV4GetPartnerOrderByOrderNumber'][0])
    {
        list($response) = $this->ordersV4GetPartnerOrderByOrderNumberWithHttpInfo($orderNumber, $contentType);
        return $response;
    }

    /**
     * Operation ordersV4GetPartnerOrderByOrderNumberWithHttpInfo
     *
     * Get an order via order number
     *
     * @param  string $orderNumber (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4GetPartnerOrderByOrderNumber'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersV4GetPartnerOrderByOrderNumberWithHttpInfo($orderNumber, string $contentType = self::contentTypes['ordersV4GetPartnerOrderByOrderNumber'][0])
    {
        $request = $this->ordersV4GetPartnerOrderByOrderNumberRequest($orderNumber, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersV4GetPartnerOrderByOrderNumberAsync
     *
     * Get an order via order number
     *
     * @param  string $orderNumber (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4GetPartnerOrderByOrderNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersV4GetPartnerOrderByOrderNumberAsync($orderNumber, string $contentType = self::contentTypes['ordersV4GetPartnerOrderByOrderNumber'][0])
    {
        return $this->ordersV4GetPartnerOrderByOrderNumberAsyncWithHttpInfo($orderNumber, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersV4GetPartnerOrderByOrderNumberAsyncWithHttpInfo
     *
     * Get an order via order number
     *
     * @param  string $orderNumber (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4GetPartnerOrderByOrderNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersV4GetPartnerOrderByOrderNumberAsyncWithHttpInfo($orderNumber, string $contentType = self::contentTypes['ordersV4GetPartnerOrderByOrderNumber'][0])
    {
        $returnType = '\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4';
        $request = $this->ordersV4GetPartnerOrderByOrderNumberRequest($orderNumber, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersV4GetPartnerOrderByOrderNumber'
     *
     * @param  string $orderNumber (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4GetPartnerOrderByOrderNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersV4GetPartnerOrderByOrderNumberRequest($orderNumber, string $contentType = self::contentTypes['ordersV4GetPartnerOrderByOrderNumber'][0])
    {

        // verify the required parameter 'orderNumber' is set
        if ($orderNumber === null || (is_array($orderNumber) && count($orderNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderNumber when calling ordersV4GetPartnerOrderByOrderNumber'
            );
        }


        $resourcePath = '/v4/orders/{orderNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($orderNumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ordersV4GetPartnerOrderBySalesOrderId
     *
     * Get an order via sales order id
     *
     * @param  string $salesOrderId salesOrderId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4GetPartnerOrderBySalesOrderId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4
     */
    public function ordersV4GetPartnerOrderBySalesOrderId($salesOrderId, string $contentType = self::contentTypes['ordersV4GetPartnerOrderBySalesOrderId'][0])
    {
        list($response) = $this->ordersV4GetPartnerOrderBySalesOrderIdWithHttpInfo($salesOrderId, $contentType);
        return $response;
    }

    /**
     * Operation ordersV4GetPartnerOrderBySalesOrderIdWithHttpInfo
     *
     * Get an order via sales order id
     *
     * @param  string $salesOrderId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4GetPartnerOrderBySalesOrderId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4, HTTP status code, HTTP response headers (array of strings)
     */
    public function ordersV4GetPartnerOrderBySalesOrderIdWithHttpInfo($salesOrderId, string $contentType = self::contentTypes['ordersV4GetPartnerOrderBySalesOrderId'][0])
    {
        $request = $this->ordersV4GetPartnerOrderBySalesOrderIdRequest($salesOrderId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation ordersV4GetPartnerOrderBySalesOrderIdAsync
     *
     * Get an order via sales order id
     *
     * @param  string $salesOrderId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4GetPartnerOrderBySalesOrderId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersV4GetPartnerOrderBySalesOrderIdAsync($salesOrderId, string $contentType = self::contentTypes['ordersV4GetPartnerOrderBySalesOrderId'][0])
    {
        return $this->ordersV4GetPartnerOrderBySalesOrderIdAsyncWithHttpInfo($salesOrderId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ordersV4GetPartnerOrderBySalesOrderIdAsyncWithHttpInfo
     *
     * Get an order via sales order id
     *
     * @param  string $salesOrderId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4GetPartnerOrderBySalesOrderId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ordersV4GetPartnerOrderBySalesOrderIdAsyncWithHttpInfo($salesOrderId, string $contentType = self::contentTypes['ordersV4GetPartnerOrderBySalesOrderId'][0])
    {
        $returnType = '\OpenAPI\Client\Otto\Model\PartnerOrderOrdersV4';
        $request = $this->ordersV4GetPartnerOrderBySalesOrderIdRequest($salesOrderId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ordersV4GetPartnerOrderBySalesOrderId'
     *
     * @param  string $salesOrderId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ordersV4GetPartnerOrderBySalesOrderId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ordersV4GetPartnerOrderBySalesOrderIdRequest($salesOrderId, string $contentType = self::contentTypes['ordersV4GetPartnerOrderBySalesOrderId'][0])
    {

        // verify the required parameter 'salesOrderId' is set
        if ($salesOrderId === null || (is_array($salesOrderId) && count($salesOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $salesOrderId when calling ordersV4GetPartnerOrderBySalesOrderId'
            );
        }


        $resourcePath = '/v4/orders/{salesOrderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($salesOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'salesOrderId' . '}',
                ObjectSerializer::toPathValue($salesOrderId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
