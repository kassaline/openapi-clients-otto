<?php
/**
 * ShipmentsV1Api
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\Otto\ApiException;
use OpenAPI\Client\Otto\Configuration;
use OpenAPI\Client\Otto\HeaderSelector;
use OpenAPI\Client\Otto\ObjectSerializer;

/**
 * ShipmentsV1Api Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShipmentsV1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST' => [
            'application/json',
        ],
        'shipmentsV1AppendPositionItemsUsingPOST' => [
            'application/json',
        ],
        'shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST' => [
            'application/json',
        ],
        'shipmentsV1CreatedAndSentShipmentUsingPOST' => [
            'application/json',
        ],
        'shipmentsV1ListShipmentsUsingGET' => [
            'application/json',
        ],
        'shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET' => [
            'application/json',
        ],
        'shipmentsV1ShipmentUsingGET' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST
     *
     * Correct an existing shipment (add sent items) by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $trackingNumber The tracking number of the shipment assigned by the carrier. (required)
     * @param  \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[] $positionItemShipmentsV1 The position items included in shipment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST($carrier, $trackingNumber, $positionItemShipmentsV1, string $contentType = self::contentTypes['shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'][0])
    {
        $this->shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOSTWithHttpInfo($carrier, $trackingNumber, $positionItemShipmentsV1, $contentType);
    }

    /**
     * Operation shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOSTWithHttpInfo
     *
     * Correct an existing shipment (add sent items) by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $trackingNumber The tracking number of the shipment assigned by the carrier. (required)
     * @param  \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[] $positionItemShipmentsV1 The position items included in shipment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOSTWithHttpInfo($carrier, $trackingNumber, $positionItemShipmentsV1, string $contentType = self::contentTypes['shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'][0])
    {
        $request = $this->shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOSTRequest($carrier, $trackingNumber, $positionItemShipmentsV1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\BadRequestAddPositionItemByTrackingNumberShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\NotFoundAddPositionItemByTrackingNumberShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ConflictAddPositionItemByTrackingNumberShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\InternalServerErrorAddPositionItemByTrackingNumberShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOSTAsync
     *
     * Correct an existing shipment (add sent items) by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $trackingNumber The tracking number of the shipment assigned by the carrier. (required)
     * @param  \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[] $positionItemShipmentsV1 The position items included in shipment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOSTAsync($carrier, $trackingNumber, $positionItemShipmentsV1, string $contentType = self::contentTypes['shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'][0])
    {
        return $this->shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOSTAsyncWithHttpInfo($carrier, $trackingNumber, $positionItemShipmentsV1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOSTAsyncWithHttpInfo
     *
     * Correct an existing shipment (add sent items) by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $trackingNumber The tracking number of the shipment assigned by the carrier. (required)
     * @param  \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[] $positionItemShipmentsV1 The position items included in shipment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOSTAsyncWithHttpInfo($carrier, $trackingNumber, $positionItemShipmentsV1, string $contentType = self::contentTypes['shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'][0])
    {
        $returnType = '';
        $request = $this->shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOSTRequest($carrier, $trackingNumber, $positionItemShipmentsV1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $trackingNumber The tracking number of the shipment assigned by the carrier. (required)
     * @param  \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[] $positionItemShipmentsV1 The position items included in shipment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOSTRequest($carrier, $trackingNumber, $positionItemShipmentsV1, string $contentType = self::contentTypes['shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'][0])
    {

        // verify the required parameter 'carrier' is set
        if ($carrier === null || (is_array($carrier) && count($carrier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier when calling shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'
            );
        }

        // verify the required parameter 'trackingNumber' is set
        if ($trackingNumber === null || (is_array($trackingNumber) && count($trackingNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingNumber when calling shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'
            );
        }

        // verify the required parameter 'positionItemShipmentsV1' is set
        if ($positionItemShipmentsV1 === null || (is_array($positionItemShipmentsV1) && count($positionItemShipmentsV1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $positionItemShipmentsV1 when calling shipmentsV1AppendPositionItemsByCarrierAndTrackingNumberUsingPOST'
            );
        }


        $resourcePath = '/v1/shipments/carriers/{carrier}/trackingnumbers/{trackingNumber}/positionitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($carrier !== null) {
            $resourcePath = str_replace(
                '{' . 'carrier' . '}',
                ObjectSerializer::toPathValue($carrier),
                $resourcePath
            );
        }
        // path params
        if ($trackingNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'trackingNumber' . '}',
                ObjectSerializer::toPathValue($trackingNumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($positionItemShipmentsV1)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($positionItemShipmentsV1));
            } else {
                $httpBody = $positionItemShipmentsV1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsV1AppendPositionItemsUsingPOST
     *
     * Correct an existing shipment (add sent items) by shipment ID.
     *
     * @param  string $shipmentId Internal shipment identifier assigned by OTTO Market. (required)
     * @param  \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[] $positionItemShipmentsV1 positionItems (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1AppendPositionItemsUsingPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipmentsV1AppendPositionItemsUsingPOST($shipmentId, $positionItemShipmentsV1, string $contentType = self::contentTypes['shipmentsV1AppendPositionItemsUsingPOST'][0])
    {
        $this->shipmentsV1AppendPositionItemsUsingPOSTWithHttpInfo($shipmentId, $positionItemShipmentsV1, $contentType);
    }

    /**
     * Operation shipmentsV1AppendPositionItemsUsingPOSTWithHttpInfo
     *
     * Correct an existing shipment (add sent items) by shipment ID.
     *
     * @param  string $shipmentId Internal shipment identifier assigned by OTTO Market. (required)
     * @param  \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[] $positionItemShipmentsV1 positionItems (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1AppendPositionItemsUsingPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsV1AppendPositionItemsUsingPOSTWithHttpInfo($shipmentId, $positionItemShipmentsV1, string $contentType = self::contentTypes['shipmentsV1AppendPositionItemsUsingPOST'][0])
    {
        $request = $this->shipmentsV1AppendPositionItemsUsingPOSTRequest($shipmentId, $positionItemShipmentsV1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\BadRequestAddPositionItemByShipmentIdShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\NotFoundAddPositionItemByShipmentIdShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ConflictAddPositionItemByShipmentIdShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\InternalServerErrorAddPositionItemByShipmentIdShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsV1AppendPositionItemsUsingPOSTAsync
     *
     * Correct an existing shipment (add sent items) by shipment ID.
     *
     * @param  string $shipmentId Internal shipment identifier assigned by OTTO Market. (required)
     * @param  \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[] $positionItemShipmentsV1 positionItems (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1AppendPositionItemsUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1AppendPositionItemsUsingPOSTAsync($shipmentId, $positionItemShipmentsV1, string $contentType = self::contentTypes['shipmentsV1AppendPositionItemsUsingPOST'][0])
    {
        return $this->shipmentsV1AppendPositionItemsUsingPOSTAsyncWithHttpInfo($shipmentId, $positionItemShipmentsV1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsV1AppendPositionItemsUsingPOSTAsyncWithHttpInfo
     *
     * Correct an existing shipment (add sent items) by shipment ID.
     *
     * @param  string $shipmentId Internal shipment identifier assigned by OTTO Market. (required)
     * @param  \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[] $positionItemShipmentsV1 positionItems (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1AppendPositionItemsUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1AppendPositionItemsUsingPOSTAsyncWithHttpInfo($shipmentId, $positionItemShipmentsV1, string $contentType = self::contentTypes['shipmentsV1AppendPositionItemsUsingPOST'][0])
    {
        $returnType = '';
        $request = $this->shipmentsV1AppendPositionItemsUsingPOSTRequest($shipmentId, $positionItemShipmentsV1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsV1AppendPositionItemsUsingPOST'
     *
     * @param  string $shipmentId Internal shipment identifier assigned by OTTO Market. (required)
     * @param  \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[] $positionItemShipmentsV1 positionItems (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1AppendPositionItemsUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentsV1AppendPositionItemsUsingPOSTRequest($shipmentId, $positionItemShipmentsV1, string $contentType = self::contentTypes['shipmentsV1AppendPositionItemsUsingPOST'][0])
    {

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling shipmentsV1AppendPositionItemsUsingPOST'
            );
        }

        // verify the required parameter 'positionItemShipmentsV1' is set
        if ($positionItemShipmentsV1 === null || (is_array($positionItemShipmentsV1) && count($positionItemShipmentsV1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $positionItemShipmentsV1 when calling shipmentsV1AppendPositionItemsUsingPOST'
            );
        }


        $resourcePath = '/v1/shipments/{shipmentId}/positionitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($positionItemShipmentsV1)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($positionItemShipmentsV1));
            } else {
                $httpBody = $positionItemShipmentsV1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST
     *
     * Create a multiparcel shipment and mark the position items as sent.
     *
     * @param  \OpenAPI\Client\Otto\Model\MultiparcelCreateShipmentRequestShipmentsV1[] $multiparcelCreateShipmentRequestShipmentsV1 request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Otto\Model\CreateMultiparcelShipmentResponseShipmentsV1|\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ConflictMultiparcelShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorMultiparcelShipmentsV1
     */
    public function shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST($multiparcelCreateShipmentRequestShipmentsV1, string $contentType = self::contentTypes['shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'][0])
    {
        list($response) = $this->shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOSTWithHttpInfo($multiparcelCreateShipmentRequestShipmentsV1, $contentType);
        return $response;
    }

    /**
     * Operation shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOSTWithHttpInfo
     *
     * Create a multiparcel shipment and mark the position items as sent.
     *
     * @param  \OpenAPI\Client\Otto\Model\MultiparcelCreateShipmentRequestShipmentsV1[] $multiparcelCreateShipmentRequestShipmentsV1 request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Otto\Model\CreateMultiparcelShipmentResponseShipmentsV1|\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ConflictMultiparcelShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorMultiparcelShipmentsV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOSTWithHttpInfo($multiparcelCreateShipmentRequestShipmentsV1, string $contentType = self::contentTypes['shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'][0])
    {
        $request = $this->shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOSTRequest($multiparcelCreateShipmentRequestShipmentsV1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Otto\Model\CreateMultiparcelShipmentResponseShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\CreateMultiparcelShipmentResponseShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\CreateMultiparcelShipmentResponseShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Otto\Model\ConflictMultiparcelShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ConflictMultiparcelShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ConflictMultiparcelShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Otto\Model\InternalServerErrorMultiparcelShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\InternalServerErrorMultiparcelShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\InternalServerErrorMultiparcelShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Otto\Model\CreateMultiparcelShipmentResponseShipmentsV1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\CreateMultiparcelShipmentResponseShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ConflictMultiparcelShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\InternalServerErrorMultiparcelShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOSTAsync
     *
     * Create a multiparcel shipment and mark the position items as sent.
     *
     * @param  \OpenAPI\Client\Otto\Model\MultiparcelCreateShipmentRequestShipmentsV1[] $multiparcelCreateShipmentRequestShipmentsV1 request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOSTAsync($multiparcelCreateShipmentRequestShipmentsV1, string $contentType = self::contentTypes['shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'][0])
    {
        return $this->shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOSTAsyncWithHttpInfo($multiparcelCreateShipmentRequestShipmentsV1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOSTAsyncWithHttpInfo
     *
     * Create a multiparcel shipment and mark the position items as sent.
     *
     * @param  \OpenAPI\Client\Otto\Model\MultiparcelCreateShipmentRequestShipmentsV1[] $multiparcelCreateShipmentRequestShipmentsV1 request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOSTAsyncWithHttpInfo($multiparcelCreateShipmentRequestShipmentsV1, string $contentType = self::contentTypes['shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'][0])
    {
        $returnType = '\OpenAPI\Client\Otto\Model\CreateMultiparcelShipmentResponseShipmentsV1';
        $request = $this->shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOSTRequest($multiparcelCreateShipmentRequestShipmentsV1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'
     *
     * @param  \OpenAPI\Client\Otto\Model\MultiparcelCreateShipmentRequestShipmentsV1[] $multiparcelCreateShipmentRequestShipmentsV1 request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOSTRequest($multiparcelCreateShipmentRequestShipmentsV1, string $contentType = self::contentTypes['shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'][0])
    {

        // verify the required parameter 'multiparcelCreateShipmentRequestShipmentsV1' is set
        if ($multiparcelCreateShipmentRequestShipmentsV1 === null || (is_array($multiparcelCreateShipmentRequestShipmentsV1) && count($multiparcelCreateShipmentRequestShipmentsV1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $multiparcelCreateShipmentRequestShipmentsV1 when calling shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST'
            );
        }
        if (count($multiparcelCreateShipmentRequestShipmentsV1) < 2) {
            throw new \InvalidArgumentException('invalid value for "$multiparcelCreateShipmentRequestShipmentsV1" when calling ShipmentsV1Api.shipmentsV1CreatedAndSentMultiparcelShipmentUsingPOST, number of items must be greater than or equal to 2.');
        }


        $resourcePath = '/v1/multiparcel-shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($multiparcelCreateShipmentRequestShipmentsV1)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($multiparcelCreateShipmentRequestShipmentsV1));
            } else {
                $httpBody = $multiparcelCreateShipmentRequestShipmentsV1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsV1CreatedAndSentShipmentUsingPOST
     *
     * Create a shipment and mark the position items as sent.
     *
     * @param  \OpenAPI\Client\Otto\Model\CreateShipmentRequestShipmentsV1 $createShipmentRequestShipmentsV1 request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1CreatedAndSentShipmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Otto\Model\CreateShipmentResponseShipmentsV1|\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ConflictShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorShipmentsV1
     */
    public function shipmentsV1CreatedAndSentShipmentUsingPOST($createShipmentRequestShipmentsV1, string $contentType = self::contentTypes['shipmentsV1CreatedAndSentShipmentUsingPOST'][0])
    {
        list($response) = $this->shipmentsV1CreatedAndSentShipmentUsingPOSTWithHttpInfo($createShipmentRequestShipmentsV1, $contentType);
        return $response;
    }

    /**
     * Operation shipmentsV1CreatedAndSentShipmentUsingPOSTWithHttpInfo
     *
     * Create a shipment and mark the position items as sent.
     *
     * @param  \OpenAPI\Client\Otto\Model\CreateShipmentRequestShipmentsV1 $createShipmentRequestShipmentsV1 request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1CreatedAndSentShipmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Otto\Model\CreateShipmentResponseShipmentsV1|\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ConflictShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorShipmentsV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsV1CreatedAndSentShipmentUsingPOSTWithHttpInfo($createShipmentRequestShipmentsV1, string $contentType = self::contentTypes['shipmentsV1CreatedAndSentShipmentUsingPOST'][0])
    {
        $request = $this->shipmentsV1CreatedAndSentShipmentUsingPOSTRequest($createShipmentRequestShipmentsV1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Otto\Model\CreateShipmentResponseShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\CreateShipmentResponseShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\CreateShipmentResponseShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Otto\Model\ConflictShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ConflictShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ConflictShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Otto\Model\InternalServerErrorShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\InternalServerErrorShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\InternalServerErrorShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Otto\Model\CreateShipmentResponseShipmentsV1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\CreateShipmentResponseShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\BadRequestShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ConflictShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\InternalServerErrorShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsV1CreatedAndSentShipmentUsingPOSTAsync
     *
     * Create a shipment and mark the position items as sent.
     *
     * @param  \OpenAPI\Client\Otto\Model\CreateShipmentRequestShipmentsV1 $createShipmentRequestShipmentsV1 request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1CreatedAndSentShipmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1CreatedAndSentShipmentUsingPOSTAsync($createShipmentRequestShipmentsV1, string $contentType = self::contentTypes['shipmentsV1CreatedAndSentShipmentUsingPOST'][0])
    {
        return $this->shipmentsV1CreatedAndSentShipmentUsingPOSTAsyncWithHttpInfo($createShipmentRequestShipmentsV1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsV1CreatedAndSentShipmentUsingPOSTAsyncWithHttpInfo
     *
     * Create a shipment and mark the position items as sent.
     *
     * @param  \OpenAPI\Client\Otto\Model\CreateShipmentRequestShipmentsV1 $createShipmentRequestShipmentsV1 request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1CreatedAndSentShipmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1CreatedAndSentShipmentUsingPOSTAsyncWithHttpInfo($createShipmentRequestShipmentsV1, string $contentType = self::contentTypes['shipmentsV1CreatedAndSentShipmentUsingPOST'][0])
    {
        $returnType = '\OpenAPI\Client\Otto\Model\CreateShipmentResponseShipmentsV1';
        $request = $this->shipmentsV1CreatedAndSentShipmentUsingPOSTRequest($createShipmentRequestShipmentsV1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsV1CreatedAndSentShipmentUsingPOST'
     *
     * @param  \OpenAPI\Client\Otto\Model\CreateShipmentRequestShipmentsV1 $createShipmentRequestShipmentsV1 request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1CreatedAndSentShipmentUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentsV1CreatedAndSentShipmentUsingPOSTRequest($createShipmentRequestShipmentsV1, string $contentType = self::contentTypes['shipmentsV1CreatedAndSentShipmentUsingPOST'][0])
    {

        // verify the required parameter 'createShipmentRequestShipmentsV1' is set
        if ($createShipmentRequestShipmentsV1 === null || (is_array($createShipmentRequestShipmentsV1) && count($createShipmentRequestShipmentsV1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createShipmentRequestShipmentsV1 when calling shipmentsV1CreatedAndSentShipmentUsingPOST'
            );
        }


        $resourcePath = '/v1/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createShipmentRequestShipmentsV1)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createShipmentRequestShipmentsV1));
            } else {
                $httpBody = $createShipmentRequestShipmentsV1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsV1ListShipmentsUsingGET
     *
     * Retrieve shipments.
     *
     * @param  string $datefrom Shipments created from this date onwards for the given authorized partner will be returned. Can be specified as either an ISO date (&#x60;YYYY-MM-DD&#x60;), which will be inferred to be in UTC time, or an ISO date time (&#x60;YYYY-MM-DD&#39;T&#39;HH:mm:ss.SSSXXX&#x60;).  For example, &#x60;2024-01-10&#x60; would be interpreted the same as &#x60;2024-01-10T00:00:00Z&#x60;. (required)
     * @param  int|null $limit The maximum number of shipments to be returned in each response. (optional, default to 25)
     * @param  string|null $next The cursor which points to the next shipment that should be queried. It is used to paginate the results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ListShipmentsUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Otto\Model\ShipmentListShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentListShipmentsV1
     */
    public function shipmentsV1ListShipmentsUsingGET($datefrom, $limit = 25, $next = null, string $contentType = self::contentTypes['shipmentsV1ListShipmentsUsingGET'][0])
    {
        list($response) = $this->shipmentsV1ListShipmentsUsingGETWithHttpInfo($datefrom, $limit, $next, $contentType);
        return $response;
    }

    /**
     * Operation shipmentsV1ListShipmentsUsingGETWithHttpInfo
     *
     * Retrieve shipments.
     *
     * @param  string $datefrom Shipments created from this date onwards for the given authorized partner will be returned. Can be specified as either an ISO date (&#x60;YYYY-MM-DD&#x60;), which will be inferred to be in UTC time, or an ISO date time (&#x60;YYYY-MM-DD&#39;T&#39;HH:mm:ss.SSSXXX&#x60;).  For example, &#x60;2024-01-10&#x60; would be interpreted the same as &#x60;2024-01-10T00:00:00Z&#x60;. (required)
     * @param  int|null $limit The maximum number of shipments to be returned in each response. (optional, default to 25)
     * @param  string|null $next The cursor which points to the next shipment that should be queried. It is used to paginate the results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ListShipmentsUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Otto\Model\ShipmentListShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentListShipmentsV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsV1ListShipmentsUsingGETWithHttpInfo($datefrom, $limit = 25, $next = null, string $contentType = self::contentTypes['shipmentsV1ListShipmentsUsingGET'][0])
    {
        $request = $this->shipmentsV1ListShipmentsUsingGETRequest($datefrom, $limit, $next, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Otto\Model\ShipmentListShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ShipmentListShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ShipmentListShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentListShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentListShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentListShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Otto\Model\ShipmentListShipmentsV1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ShipmentListShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentListShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsV1ListShipmentsUsingGETAsync
     *
     * Retrieve shipments.
     *
     * @param  string $datefrom Shipments created from this date onwards for the given authorized partner will be returned. Can be specified as either an ISO date (&#x60;YYYY-MM-DD&#x60;), which will be inferred to be in UTC time, or an ISO date time (&#x60;YYYY-MM-DD&#39;T&#39;HH:mm:ss.SSSXXX&#x60;).  For example, &#x60;2024-01-10&#x60; would be interpreted the same as &#x60;2024-01-10T00:00:00Z&#x60;. (required)
     * @param  int|null $limit The maximum number of shipments to be returned in each response. (optional, default to 25)
     * @param  string|null $next The cursor which points to the next shipment that should be queried. It is used to paginate the results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ListShipmentsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1ListShipmentsUsingGETAsync($datefrom, $limit = 25, $next = null, string $contentType = self::contentTypes['shipmentsV1ListShipmentsUsingGET'][0])
    {
        return $this->shipmentsV1ListShipmentsUsingGETAsyncWithHttpInfo($datefrom, $limit, $next, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsV1ListShipmentsUsingGETAsyncWithHttpInfo
     *
     * Retrieve shipments.
     *
     * @param  string $datefrom Shipments created from this date onwards for the given authorized partner will be returned. Can be specified as either an ISO date (&#x60;YYYY-MM-DD&#x60;), which will be inferred to be in UTC time, or an ISO date time (&#x60;YYYY-MM-DD&#39;T&#39;HH:mm:ss.SSSXXX&#x60;).  For example, &#x60;2024-01-10&#x60; would be interpreted the same as &#x60;2024-01-10T00:00:00Z&#x60;. (required)
     * @param  int|null $limit The maximum number of shipments to be returned in each response. (optional, default to 25)
     * @param  string|null $next The cursor which points to the next shipment that should be queried. It is used to paginate the results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ListShipmentsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1ListShipmentsUsingGETAsyncWithHttpInfo($datefrom, $limit = 25, $next = null, string $contentType = self::contentTypes['shipmentsV1ListShipmentsUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Otto\Model\ShipmentListShipmentsV1';
        $request = $this->shipmentsV1ListShipmentsUsingGETRequest($datefrom, $limit, $next, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsV1ListShipmentsUsingGET'
     *
     * @param  string $datefrom Shipments created from this date onwards for the given authorized partner will be returned. Can be specified as either an ISO date (&#x60;YYYY-MM-DD&#x60;), which will be inferred to be in UTC time, or an ISO date time (&#x60;YYYY-MM-DD&#39;T&#39;HH:mm:ss.SSSXXX&#x60;).  For example, &#x60;2024-01-10&#x60; would be interpreted the same as &#x60;2024-01-10T00:00:00Z&#x60;. (required)
     * @param  int|null $limit The maximum number of shipments to be returned in each response. (optional, default to 25)
     * @param  string|null $next The cursor which points to the next shipment that should be queried. It is used to paginate the results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ListShipmentsUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentsV1ListShipmentsUsingGETRequest($datefrom, $limit = 25, $next = null, string $contentType = self::contentTypes['shipmentsV1ListShipmentsUsingGET'][0])
    {

        // verify the required parameter 'datefrom' is set
        if ($datefrom === null || (is_array($datefrom) && count($datefrom) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $datefrom when calling shipmentsV1ListShipmentsUsingGET'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ShipmentsV1Api.shipmentsV1ListShipmentsUsingGET, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ShipmentsV1Api.shipmentsV1ListShipmentsUsingGET, must be bigger than or equal to 1.');
        }



        $resourcePath = '/v1/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datefrom,
            'datefrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next,
            'next', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET
     *
     * Retrieve shipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $trackingNumber The tracking number of the shipment assigned by the carrier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Otto\Model\ShipmentShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByTrackingNumberShipmentsV1|\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByTrackingNumberShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByTrackingNumberShipmentsV1
     */
    public function shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET($carrier, $trackingNumber, string $contentType = self::contentTypes['shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'][0])
    {
        list($response) = $this->shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo($carrier, $trackingNumber, $contentType);
        return $response;
    }

    /**
     * Operation shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo
     *
     * Retrieve shipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $trackingNumber The tracking number of the shipment assigned by the carrier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Otto\Model\ShipmentShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByTrackingNumberShipmentsV1|\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByTrackingNumberShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByTrackingNumberShipmentsV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGETWithHttpInfo($carrier, $trackingNumber, string $contentType = self::contentTypes['shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'][0])
    {
        $request = $this->shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $trackingNumber, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByTrackingNumberShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByTrackingNumberShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByTrackingNumberShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByTrackingNumberShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByTrackingNumberShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByTrackingNumberShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByTrackingNumberShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByTrackingNumberShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByTrackingNumberShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByTrackingNumberShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByTrackingNumberShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByTrackingNumberShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGETAsync
     *
     * Retrieve shipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $trackingNumber The tracking number of the shipment assigned by the carrier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGETAsync($carrier, $trackingNumber, string $contentType = self::contentTypes['shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'][0])
    {
        return $this->shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo($carrier, $trackingNumber, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo
     *
     * Retrieve shipment by carrier and tracking number.
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $trackingNumber The tracking number of the shipment assigned by the carrier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGETAsyncWithHttpInfo($carrier, $trackingNumber, string $contentType = self::contentTypes['shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1';
        $request = $this->shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $trackingNumber, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'
     *
     * @param  string $carrier The carrier of the shipment. (required)
     * @param  string $trackingNumber The tracking number of the shipment assigned by the carrier. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGETRequest($carrier, $trackingNumber, string $contentType = self::contentTypes['shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'][0])
    {

        // verify the required parameter 'carrier' is set
        if ($carrier === null || (is_array($carrier) && count($carrier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier when calling shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'
            );
        }

        // verify the required parameter 'trackingNumber' is set
        if ($trackingNumber === null || (is_array($trackingNumber) && count($trackingNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingNumber when calling shipmentsV1ShipmentByCarrierAndTrackingNumberUsingGET'
            );
        }


        $resourcePath = '/v1/shipments/carriers/{carrier}/trackingnumbers/{trackingNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($carrier !== null) {
            $resourcePath = str_replace(
                '{' . 'carrier' . '}',
                ObjectSerializer::toPathValue($carrier),
                $resourcePath
            );
        }
        // path params
        if ($trackingNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'trackingNumber' . '}',
                ObjectSerializer::toPathValue($trackingNumber),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsV1ShipmentUsingGET
     *
     * Retrieve shipment by shipment ID.
     *
     * @param  string $shipmentId Internal shipment identifier assigned by OTTO Market. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ShipmentUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Otto\Model\ShipmentShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByShipmentIdShipmentsV1|\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByShipmentIdShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByShipmentIdShipmentsV1
     */
    public function shipmentsV1ShipmentUsingGET($shipmentId, string $contentType = self::contentTypes['shipmentsV1ShipmentUsingGET'][0])
    {
        list($response) = $this->shipmentsV1ShipmentUsingGETWithHttpInfo($shipmentId, $contentType);
        return $response;
    }

    /**
     * Operation shipmentsV1ShipmentUsingGETWithHttpInfo
     *
     * Retrieve shipment by shipment ID.
     *
     * @param  string $shipmentId Internal shipment identifier assigned by OTTO Market. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ShipmentUsingGET'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\Otto\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Otto\Model\ShipmentShipmentsV1|mixed|\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByShipmentIdShipmentsV1|\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByShipmentIdShipmentsV1|\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByShipmentIdShipmentsV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsV1ShipmentUsingGETWithHttpInfo($shipmentId, string $contentType = self::contentTypes['shipmentsV1ShipmentUsingGET'][0])
    {
        $request = $this->shipmentsV1ShipmentUsingGETRequest($shipmentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByShipmentIdShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByShipmentIdShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByShipmentIdShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByShipmentIdShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByShipmentIdShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByShipmentIdShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByShipmentIdShipmentsV1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByShipmentIdShipmentsV1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByShipmentIdShipmentsV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\ForbiddenGetShipmentByShipmentIdShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\NotFoundGetShipmentByShipmentIdShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Otto\Model\InternalServerErrorGetShipmentByShipmentIdShipmentsV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsV1ShipmentUsingGETAsync
     *
     * Retrieve shipment by shipment ID.
     *
     * @param  string $shipmentId Internal shipment identifier assigned by OTTO Market. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ShipmentUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1ShipmentUsingGETAsync($shipmentId, string $contentType = self::contentTypes['shipmentsV1ShipmentUsingGET'][0])
    {
        return $this->shipmentsV1ShipmentUsingGETAsyncWithHttpInfo($shipmentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsV1ShipmentUsingGETAsyncWithHttpInfo
     *
     * Retrieve shipment by shipment ID.
     *
     * @param  string $shipmentId Internal shipment identifier assigned by OTTO Market. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ShipmentUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsV1ShipmentUsingGETAsyncWithHttpInfo($shipmentId, string $contentType = self::contentTypes['shipmentsV1ShipmentUsingGET'][0])
    {
        $returnType = '\OpenAPI\Client\Otto\Model\ShipmentShipmentsV1';
        $request = $this->shipmentsV1ShipmentUsingGETRequest($shipmentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsV1ShipmentUsingGET'
     *
     * @param  string $shipmentId Internal shipment identifier assigned by OTTO Market. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipmentsV1ShipmentUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipmentsV1ShipmentUsingGETRequest($shipmentId, string $contentType = self::contentTypes['shipmentsV1ShipmentUsingGET'][0])
    {

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling shipmentsV1ShipmentUsingGET'
            );
        }


        $resourcePath = '/v1/shipments/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
