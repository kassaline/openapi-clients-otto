<?php
/**
 * ProductDescriptionProductsV4
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * ProductDescriptionProductsV4 Class Doc Comment
 *
 * @category Class
 * @description Extensive description of the product.
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductDescriptionProductsV4 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductDescription__Products-V4';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category' => 'string',
        'brandId' => 'string',
        'productLine' => 'string',
        'productionDate' => '\DateTime',
        'multiPack' => 'bool',
        'bundle' => 'bool',
        'fscCertified' => 'bool',
        'disposal' => 'bool',
        'productUrl' => 'string',
        'description' => 'string',
        'bulletPoints' => 'string[]',
        'attributes' => '\OpenAPI\Client\Otto\Model\AttributeProductsV4[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category' => null,
        'brandId' => null,
        'productLine' => null,
        'productionDate' => 'date-time',
        'multiPack' => null,
        'bundle' => null,
        'fscCertified' => null,
        'disposal' => null,
        'productUrl' => null,
        'description' => null,
        'bulletPoints' => null,
        'attributes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'category' => false,
        'brandId' => false,
        'productLine' => false,
        'productionDate' => false,
        'multiPack' => false,
        'bundle' => false,
        'fscCertified' => false,
        'disposal' => false,
        'productUrl' => false,
        'description' => false,
        'bulletPoints' => false,
        'attributes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'brandId' => 'brandId',
        'productLine' => 'productLine',
        'productionDate' => 'productionDate',
        'multiPack' => 'multiPack',
        'bundle' => 'bundle',
        'fscCertified' => 'fscCertified',
        'disposal' => 'disposal',
        'productUrl' => 'productUrl',
        'description' => 'description',
        'bulletPoints' => 'bulletPoints',
        'attributes' => 'attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'brandId' => 'setBrandId',
        'productLine' => 'setProductLine',
        'productionDate' => 'setProductionDate',
        'multiPack' => 'setMultiPack',
        'bundle' => 'setBundle',
        'fscCertified' => 'setFscCertified',
        'disposal' => 'setDisposal',
        'productUrl' => 'setProductUrl',
        'description' => 'setDescription',
        'bulletPoints' => 'setBulletPoints',
        'attributes' => 'setAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'brandId' => 'getBrandId',
        'productLine' => 'getProductLine',
        'productionDate' => 'getProductionDate',
        'multiPack' => 'getMultiPack',
        'bundle' => 'getBundle',
        'fscCertified' => 'getFscCertified',
        'disposal' => 'getDisposal',
        'productUrl' => 'getProductUrl',
        'description' => 'getDescription',
        'bulletPoints' => 'getBulletPoints',
        'attributes' => 'getAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('brandId', $data ?? [], null);
        $this->setIfExists('productLine', $data ?? [], null);
        $this->setIfExists('productionDate', $data ?? [], null);
        $this->setIfExists('multiPack', $data ?? [], null);
        $this->setIfExists('bundle', $data ?? [], null);
        $this->setIfExists('fscCertified', $data ?? [], null);
        $this->setIfExists('disposal', $data ?? [], null);
        $this->setIfExists('productUrl', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('bulletPoints', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['brandId'] === null) {
            $invalidProperties[] = "'brandId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Denotes the assortment type of the product, like 'bag' or 'shirt'. Mandatory. Must be identical for all variants of a product. Must be present in the Category service offered via Category endpoint
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets brandId
     *
     * @return string
     */
    public function getBrandId()
    {
        return $this->container['brandId'];
    }

    /**
     * Sets brandId
     *
     * @param string $brandId Denotes the brand ID of a product. Brands and the mapping of their names to brand Ids should be done using the brand endpoint. Must be present in the Brand service offered via Brand endpoint. Must be identical for all variants of a product.
     *
     * @return self
     */
    public function setBrandId($brandId)
    {
        if (is_null($brandId)) {
            throw new \InvalidArgumentException('non-nullable brandId cannot be null');
        }
        $this->container['brandId'] = $brandId;

        return $this;
    }

    /**
     * Gets productLine
     *
     * @return string|null
     */
    public function getProductLine()
    {
        return $this->container['productLine'];
    }

    /**
     * Sets productLine
     *
     * @param string|null $productLine Denotes the proper name of a product, like '501'. May contain a maximum of 70 characters. If provided, it must be identical for all variants of a product.
     *
     * @return self
     */
    public function setProductLine($productLine)
    {
        if (is_null($productLine)) {
            throw new \InvalidArgumentException('non-nullable productLine cannot be null');
        }
        $this->container['productLine'] = $productLine;

        return $this;
    }

    /**
     * Gets productionDate
     *
     * @return \DateTime|null
     */
    public function getProductionDate()
    {
        return $this->container['productionDate'];
    }

    /**
     * Sets productionDate
     *
     * @param \DateTime|null $productionDate Denotes the ISO8601 date of manufacture of a product variant.
     *
     * @return self
     */
    public function setProductionDate($productionDate)
    {
        if (is_null($productionDate)) {
            throw new \InvalidArgumentException('non-nullable productionDate cannot be null');
        }
        $this->container['productionDate'] = $productionDate;

        return $this;
    }

    /**
     * Gets multiPack
     *
     * @return bool|null
     */
    public function getMultiPack()
    {
        return $this->container['multiPack'];
    }

    /**
     * Sets multiPack
     *
     * @param bool|null $multiPack If the product variant is part of a set: 'true'; otherwise 'false'
     *
     * @return self
     */
    public function setMultiPack($multiPack)
    {
        if (is_null($multiPack)) {
            throw new \InvalidArgumentException('non-nullable multiPack cannot be null');
        }
        $this->container['multiPack'] = $multiPack;

        return $this;
    }

    /**
     * Gets bundle
     *
     * @return bool|null
     */
    public function getBundle()
    {
        return $this->container['bundle'];
    }

    /**
     * Sets bundle
     *
     * @param bool|null $bundle If the product variant is part of a bundle: 'true'; otherwise 'false'
     *
     * @return self
     */
    public function setBundle($bundle)
    {
        if (is_null($bundle)) {
            throw new \InvalidArgumentException('non-nullable bundle cannot be null');
        }
        $this->container['bundle'] = $bundle;

        return $this;
    }

    /**
     * Gets fscCertified
     *
     * @return bool|null
     */
    public function getFscCertified()
    {
        return $this->container['fscCertified'];
    }

    /**
     * Sets fscCertified
     *
     * @param bool|null $fscCertified If the product variant is certified by the Forest Stewardship Council: 'true'; otherwise 'false'
     *
     * @return self
     */
    public function setFscCertified($fscCertified)
    {
        if (is_null($fscCertified)) {
            throw new \InvalidArgumentException('non-nullable fscCertified cannot be null');
        }
        $this->container['fscCertified'] = $fscCertified;

        return $this;
    }

    /**
     * Gets disposal
     *
     * @return bool|null
     */
    public function getDisposal()
    {
        return $this->container['disposal'];
    }

    /**
     * Sets disposal
     *
     * @param bool|null $disposal If true, otto.de will present information about the disposal of the product (or parts of it).
     *
     * @return self
     */
    public function setDisposal($disposal)
    {
        if (is_null($disposal)) {
            throw new \InvalidArgumentException('non-nullable disposal cannot be null');
        }
        $this->container['disposal'] = $disposal;

        return $this;
    }

    /**
     * Gets productUrl
     *
     * @return string|null
     */
    public function getProductUrl()
    {
        return $this->container['productUrl'];
    }

    /**
     * Sets productUrl
     *
     * @param string|null $productUrl Refers to a representation of the product variant in a shop of the partner. Should be a valid URL.
     *
     * @return self
     */
    public function setProductUrl($productUrl)
    {
        if (is_null($productUrl)) {
            throw new \InvalidArgumentException('non-nullable productUrl cannot be null');
        }
        $this->container['productUrl'] = $productUrl;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Represents a textual description of a product variant. May contain HTML elements. Should contain less than 2000 characters. Relevant for SEO.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets bulletPoints
     *
     * @return string[]|null
     */
    public function getBulletPoints()
    {
        return $this->container['bulletPoints'];
    }

    /**
     * Sets bulletPoints
     *
     * @param string[]|null $bulletPoints May contain a minimum of 3 and a maximum of 180 characters.
     *
     * @return self
     */
    public function setBulletPoints($bulletPoints)
    {
        if (is_null($bulletPoints)) {
            throw new \InvalidArgumentException('non-nullable bulletPoints cannot be null');
        }
        $this->container['bulletPoints'] = $bulletPoints;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Otto\Model\AttributeProductsV4[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Otto\Model\AttributeProductsV4[]|null $attributes Lists all the descriptive information about a product variant a partner can provide. Must be provided in the form of a key values pair. Will be validated against the AttributeDefinitions from Category endpoint provided by Otto market.
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


