<?php
/**
 * PartnerOrderOrdersV4
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * PartnerOrderOrdersV4 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PartnerOrderOrdersV4 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PartnerOrder__Orders-V4';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deliveryAddress' => '\OpenAPI\Client\Otto\Model\AddressOrdersV4',
        'initialDeliveryFees' => '\OpenAPI\Client\Otto\Model\InitialDeliveryFeeOrdersV4[]',
        'initialDiscounts' => '\OpenAPI\Client\Otto\Model\InitialDiscountOrdersV4[]',
        'invoiceAddress' => '\OpenAPI\Client\Otto\Model\AddressOrdersV4',
        'lastModifiedDate' => '\DateTime',
        'links' => '\OpenAPI\Client\Otto\Model\LinkOrdersV4[]',
        'orderDate' => '\DateTime',
        'orderLifecycleInformation' => '\OpenAPI\Client\Otto\Model\OrderLifecycleInformationOrdersV4',
        'orderNumber' => 'string',
        'payment' => '\OpenAPI\Client\Otto\Model\PaymentOrdersV4',
        'positionItems' => '\OpenAPI\Client\Otto\Model\PositionItemOrdersV4[]',
        'salesOrderId' => 'string',
        'suspectedFraudCase' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deliveryAddress' => null,
        'initialDeliveryFees' => null,
        'initialDiscounts' => null,
        'invoiceAddress' => null,
        'lastModifiedDate' => 'date-time',
        'links' => null,
        'orderDate' => 'date-time',
        'orderLifecycleInformation' => null,
        'orderNumber' => null,
        'payment' => null,
        'positionItems' => null,
        'salesOrderId' => null,
        'suspectedFraudCase' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'deliveryAddress' => false,
        'initialDeliveryFees' => false,
        'initialDiscounts' => false,
        'invoiceAddress' => false,
        'lastModifiedDate' => false,
        'links' => false,
        'orderDate' => false,
        'orderLifecycleInformation' => false,
        'orderNumber' => false,
        'payment' => false,
        'positionItems' => false,
        'salesOrderId' => false,
        'suspectedFraudCase' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deliveryAddress' => 'deliveryAddress',
        'initialDeliveryFees' => 'initialDeliveryFees',
        'initialDiscounts' => 'initialDiscounts',
        'invoiceAddress' => 'invoiceAddress',
        'lastModifiedDate' => 'lastModifiedDate',
        'links' => 'links',
        'orderDate' => 'orderDate',
        'orderLifecycleInformation' => 'orderLifecycleInformation',
        'orderNumber' => 'orderNumber',
        'payment' => 'payment',
        'positionItems' => 'positionItems',
        'salesOrderId' => 'salesOrderId',
        'suspectedFraudCase' => 'suspectedFraudCase'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deliveryAddress' => 'setDeliveryAddress',
        'initialDeliveryFees' => 'setInitialDeliveryFees',
        'initialDiscounts' => 'setInitialDiscounts',
        'invoiceAddress' => 'setInvoiceAddress',
        'lastModifiedDate' => 'setLastModifiedDate',
        'links' => 'setLinks',
        'orderDate' => 'setOrderDate',
        'orderLifecycleInformation' => 'setOrderLifecycleInformation',
        'orderNumber' => 'setOrderNumber',
        'payment' => 'setPayment',
        'positionItems' => 'setPositionItems',
        'salesOrderId' => 'setSalesOrderId',
        'suspectedFraudCase' => 'setSuspectedFraudCase'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deliveryAddress' => 'getDeliveryAddress',
        'initialDeliveryFees' => 'getInitialDeliveryFees',
        'initialDiscounts' => 'getInitialDiscounts',
        'invoiceAddress' => 'getInvoiceAddress',
        'lastModifiedDate' => 'getLastModifiedDate',
        'links' => 'getLinks',
        'orderDate' => 'getOrderDate',
        'orderLifecycleInformation' => 'getOrderLifecycleInformation',
        'orderNumber' => 'getOrderNumber',
        'payment' => 'getPayment',
        'positionItems' => 'getPositionItems',
        'salesOrderId' => 'getSalesOrderId',
        'suspectedFraudCase' => 'getSuspectedFraudCase'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('deliveryAddress', $data ?? [], null);
        $this->setIfExists('initialDeliveryFees', $data ?? [], null);
        $this->setIfExists('initialDiscounts', $data ?? [], null);
        $this->setIfExists('invoiceAddress', $data ?? [], null);
        $this->setIfExists('lastModifiedDate', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('orderDate', $data ?? [], null);
        $this->setIfExists('orderLifecycleInformation', $data ?? [], null);
        $this->setIfExists('orderNumber', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('positionItems', $data ?? [], null);
        $this->setIfExists('salesOrderId', $data ?? [], null);
        $this->setIfExists('suspectedFraudCase', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['orderDate'] === null) {
            $invalidProperties[] = "'orderDate' can't be null";
        }
        if ($this->container['orderLifecycleInformation'] === null) {
            $invalidProperties[] = "'orderLifecycleInformation' can't be null";
        }
        if ($this->container['orderNumber'] === null) {
            $invalidProperties[] = "'orderNumber' can't be null";
        }
        if ($this->container['positionItems'] === null) {
            $invalidProperties[] = "'positionItems' can't be null";
        }
        if ($this->container['salesOrderId'] === null) {
            $invalidProperties[] = "'salesOrderId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deliveryAddress
     *
     * @return \OpenAPI\Client\Otto\Model\AddressOrdersV4|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param \OpenAPI\Client\Otto\Model\AddressOrdersV4|null $deliveryAddress deliveryAddress
     *
     * @return self
     */
    public function setDeliveryAddress($deliveryAddress)
    {
        if (is_null($deliveryAddress)) {
            throw new \InvalidArgumentException('non-nullable deliveryAddress cannot be null');
        }
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets initialDeliveryFees
     *
     * @return \OpenAPI\Client\Otto\Model\InitialDeliveryFeeOrdersV4[]|null
     */
    public function getInitialDeliveryFees()
    {
        return $this->container['initialDeliveryFees'];
    }

    /**
     * Sets initialDeliveryFees
     *
     * @param \OpenAPI\Client\Otto\Model\InitialDeliveryFeeOrdersV4[]|null $initialDeliveryFees The delivery fees on customer checkout
     *
     * @return self
     */
    public function setInitialDeliveryFees($initialDeliveryFees)
    {
        if (is_null($initialDeliveryFees)) {
            throw new \InvalidArgumentException('non-nullable initialDeliveryFees cannot be null');
        }
        $this->container['initialDeliveryFees'] = $initialDeliveryFees;

        return $this;
    }

    /**
     * Gets initialDiscounts
     *
     * @return \OpenAPI\Client\Otto\Model\InitialDiscountOrdersV4[]|null
     */
    public function getInitialDiscounts()
    {
        return $this->container['initialDiscounts'];
    }

    /**
     * Sets initialDiscounts
     *
     * @param \OpenAPI\Client\Otto\Model\InitialDiscountOrdersV4[]|null $initialDiscounts The initial discounts on customer checkout
     *
     * @return self
     */
    public function setInitialDiscounts($initialDiscounts)
    {
        if (is_null($initialDiscounts)) {
            throw new \InvalidArgumentException('non-nullable initialDiscounts cannot be null');
        }
        $this->container['initialDiscounts'] = $initialDiscounts;

        return $this;
    }

    /**
     * Gets invoiceAddress
     *
     * @return \OpenAPI\Client\Otto\Model\AddressOrdersV4|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoiceAddress'];
    }

    /**
     * Sets invoiceAddress
     *
     * @param \OpenAPI\Client\Otto\Model\AddressOrdersV4|null $invoiceAddress invoiceAddress
     *
     * @return self
     */
    public function setInvoiceAddress($invoiceAddress)
    {
        if (is_null($invoiceAddress)) {
            throw new \InvalidArgumentException('non-nullable invoiceAddress cannot be null');
        }
        $this->container['invoiceAddress'] = $invoiceAddress;

        return $this;
    }

    /**
     * Gets lastModifiedDate
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['lastModifiedDate'];
    }

    /**
     * Sets lastModifiedDate
     *
     * @param \DateTime|null $lastModifiedDate Last order update date
     *
     * @return self
     */
    public function setLastModifiedDate($lastModifiedDate)
    {
        if (is_null($lastModifiedDate)) {
            throw new \InvalidArgumentException('non-nullable lastModifiedDate cannot be null');
        }
        $this->container['lastModifiedDate'] = $lastModifiedDate;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Otto\Model\LinkOrdersV4[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Otto\Model\LinkOrdersV4[]|null $links Order related links like the link to fetch the single partner order
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets orderDate
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['orderDate'];
    }

    /**
     * Sets orderDate
     *
     * @param \DateTime $orderDate The date, when this order has been placed
     *
     * @return self
     */
    public function setOrderDate($orderDate)
    {
        if (is_null($orderDate)) {
            throw new \InvalidArgumentException('non-nullable orderDate cannot be null');
        }
        $this->container['orderDate'] = $orderDate;

        return $this;
    }

    /**
     * Gets orderLifecycleInformation
     *
     * @return \OpenAPI\Client\Otto\Model\OrderLifecycleInformationOrdersV4
     */
    public function getOrderLifecycleInformation()
    {
        return $this->container['orderLifecycleInformation'];
    }

    /**
     * Sets orderLifecycleInformation
     *
     * @param \OpenAPI\Client\Otto\Model\OrderLifecycleInformationOrdersV4 $orderLifecycleInformation orderLifecycleInformation
     *
     * @return self
     */
    public function setOrderLifecycleInformation($orderLifecycleInformation)
    {
        if (is_null($orderLifecycleInformation)) {
            throw new \InvalidArgumentException('non-nullable orderLifecycleInformation cannot be null');
        }
        $this->container['orderLifecycleInformation'] = $orderLifecycleInformation;

        return $this;
    }

    /**
     * Gets orderNumber
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['orderNumber'];
    }

    /**
     * Sets orderNumber
     *
     * @param string $orderNumber The order number. An unique human readable 10 character(alphanumeric) identifier referring to this order
     *
     * @return self
     */
    public function setOrderNumber($orderNumber)
    {
        if (is_null($orderNumber)) {
            throw new \InvalidArgumentException('non-nullable orderNumber cannot be null');
        }
        $this->container['orderNumber'] = $orderNumber;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \OpenAPI\Client\Otto\Model\PaymentOrdersV4|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \OpenAPI\Client\Otto\Model\PaymentOrdersV4|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets positionItems
     *
     * @return \OpenAPI\Client\Otto\Model\PositionItemOrdersV4[]
     */
    public function getPositionItems()
    {
        return $this->container['positionItems'];
    }

    /**
     * Sets positionItems
     *
     * @param \OpenAPI\Client\Otto\Model\PositionItemOrdersV4[] $positionItems The physical position items of this order. Multiple position item can refer to the same product
     *
     * @return self
     */
    public function setPositionItems($positionItems)
    {
        if (is_null($positionItems)) {
            throw new \InvalidArgumentException('non-nullable positionItems cannot be null');
        }
        $this->container['positionItems'] = $positionItems;

        return $this;
    }

    /**
     * Gets salesOrderId
     *
     * @return string
     */
    public function getSalesOrderId()
    {
        return $this->container['salesOrderId'];
    }

    /**
     * Sets salesOrderId
     *
     * @param string $salesOrderId The id of the corresponding sales order. For one partner the sales order id is unique
     *
     * @return self
     */
    public function setSalesOrderId($salesOrderId)
    {
        if (is_null($salesOrderId)) {
            throw new \InvalidArgumentException('non-nullable salesOrderId cannot be null');
        }
        $this->container['salesOrderId'] = $salesOrderId;

        return $this;
    }

    /**
     * Gets suspectedFraudCase
     *
     * @return bool|null
     */
    public function getSuspectedFraudCase()
    {
        return $this->container['suspectedFraudCase'];
    }

    /**
     * Sets suspectedFraudCase
     *
     * @param bool|null $suspectedFraudCase Order is suspected fraud case or not
     *
     * @return self
     */
    public function setSuspectedFraudCase($suspectedFraudCase)
    {
        if (is_null($suspectedFraudCase)) {
            throw new \InvalidArgumentException('non-nullable suspectedFraudCase cannot be null');
        }
        $this->container['suspectedFraudCase'] = $suspectedFraudCase;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


