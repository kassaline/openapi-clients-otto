<?php
/**
 * PartnerReceiptsV3
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * PartnerReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description Partner for whom the receipt is created
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PartnerReceiptsV3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Partner__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'partnerName' => 'string',
        'street' => 'string',
        'zipCode' => 'string',
        'city' => 'string',
        'countryCode' => 'string',
        'vatId' => 'string',
        'representedBy' => 'string',
        'registerCourt' => 'string',
        'commercialRegisterNumber' => 'string',
        'headOfSupervisoryBoard' => 'string',
        'shopName' => 'string',
        'weeeRegistrationNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'partnerName' => null,
        'street' => null,
        'zipCode' => null,
        'city' => null,
        'countryCode' => null,
        'vatId' => null,
        'representedBy' => null,
        'registerCourt' => null,
        'commercialRegisterNumber' => null,
        'headOfSupervisoryBoard' => null,
        'shopName' => null,
        'weeeRegistrationNumber' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'partnerName' => false,
        'street' => false,
        'zipCode' => false,
        'city' => false,
        'countryCode' => false,
        'vatId' => false,
        'representedBy' => false,
        'registerCourt' => false,
        'commercialRegisterNumber' => false,
        'headOfSupervisoryBoard' => false,
        'shopName' => false,
        'weeeRegistrationNumber' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'partnerName' => 'partnerName',
        'street' => 'street',
        'zipCode' => 'zipCode',
        'city' => 'city',
        'countryCode' => 'countryCode',
        'vatId' => 'vatId',
        'representedBy' => 'representedBy',
        'registerCourt' => 'registerCourt',
        'commercialRegisterNumber' => 'commercialRegisterNumber',
        'headOfSupervisoryBoard' => 'headOfSupervisoryBoard',
        'shopName' => 'shopName',
        'weeeRegistrationNumber' => 'weeeRegistrationNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'partnerName' => 'setPartnerName',
        'street' => 'setStreet',
        'zipCode' => 'setZipCode',
        'city' => 'setCity',
        'countryCode' => 'setCountryCode',
        'vatId' => 'setVatId',
        'representedBy' => 'setRepresentedBy',
        'registerCourt' => 'setRegisterCourt',
        'commercialRegisterNumber' => 'setCommercialRegisterNumber',
        'headOfSupervisoryBoard' => 'setHeadOfSupervisoryBoard',
        'shopName' => 'setShopName',
        'weeeRegistrationNumber' => 'setWeeeRegistrationNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'partnerName' => 'getPartnerName',
        'street' => 'getStreet',
        'zipCode' => 'getZipCode',
        'city' => 'getCity',
        'countryCode' => 'getCountryCode',
        'vatId' => 'getVatId',
        'representedBy' => 'getRepresentedBy',
        'registerCourt' => 'getRegisterCourt',
        'commercialRegisterNumber' => 'getCommercialRegisterNumber',
        'headOfSupervisoryBoard' => 'getHeadOfSupervisoryBoard',
        'shopName' => 'getShopName',
        'weeeRegistrationNumber' => 'getWeeeRegistrationNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('partnerName', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('zipCode', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
        $this->setIfExists('vatId', $data ?? [], null);
        $this->setIfExists('representedBy', $data ?? [], null);
        $this->setIfExists('registerCourt', $data ?? [], null);
        $this->setIfExists('commercialRegisterNumber', $data ?? [], null);
        $this->setIfExists('headOfSupervisoryBoard', $data ?? [], null);
        $this->setIfExists('shopName', $data ?? [], null);
        $this->setIfExists('weeeRegistrationNumber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['partnerName'] === null) {
            $invalidProperties[] = "'partnerName' can't be null";
        }
        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        if ($this->container['zipCode'] === null) {
            $invalidProperties[] = "'zipCode' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['countryCode'] === null) {
            $invalidProperties[] = "'countryCode' can't be null";
        }
        if ($this->container['vatId'] === null) {
            $invalidProperties[] = "'vatId' can't be null";
        }
        if ($this->container['representedBy'] === null) {
            $invalidProperties[] = "'representedBy' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets partnerName
     *
     * @return string
     */
    public function getPartnerName()
    {
        return $this->container['partnerName'];
    }

    /**
     * Sets partnerName
     *
     * @param string $partnerName Name of the selling partner/company.  ATTENTION: In previous version the information was called name
     *
     * @return self
     */
    public function setPartnerName($partnerName)
    {
        if (is_null($partnerName)) {
            throw new \InvalidArgumentException('non-nullable partnerName cannot be null');
        }
        $this->container['partnerName'] = $partnerName;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Street and house number of company address
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets zipCode
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zipCode'];
    }

    /**
     * Sets zipCode
     *
     * @param string $zipCode Zip code of company address
     *
     * @return self
     */
    public function setZipCode($zipCode)
    {
        if (is_null($zipCode)) {
            throw new \InvalidArgumentException('non-nullable zipCode cannot be null');
        }
        $this->container['zipCode'] = $zipCode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City of company address
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode Country of company address represented as country code (ISO 3166-1 alpha-3)
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        if (is_null($countryCode)) {
            throw new \InvalidArgumentException('non-nullable countryCode cannot be null');
        }
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets vatId
     *
     * @return string
     */
    public function getVatId()
    {
        return $this->container['vatId'];
    }

    /**
     * Sets vatId
     *
     * @param string $vatId Value added tax identification number of partner
     *
     * @return self
     */
    public function setVatId($vatId)
    {
        if (is_null($vatId)) {
            throw new \InvalidArgumentException('non-nullable vatId cannot be null');
        }
        $this->container['vatId'] = $vatId;

        return $this;
    }

    /**
     * Gets representedBy
     *
     * @return string
     */
    public function getRepresentedBy()
    {
        return $this->container['representedBy'];
    }

    /**
     * Sets representedBy
     *
     * @param string $representedBy The partner's representative(s).  ATTENTION: In previous version the information was called legalRepresentatives
     *
     * @return self
     */
    public function setRepresentedBy($representedBy)
    {
        if (is_null($representedBy)) {
            throw new \InvalidArgumentException('non-nullable representedBy cannot be null');
        }
        $this->container['representedBy'] = $representedBy;

        return $this;
    }

    /**
     * Gets registerCourt
     *
     * @return string|null
     */
    public function getRegisterCourt()
    {
        return $this->container['registerCourt'];
    }

    /**
     * Sets registerCourt
     *
     * @param string|null $registerCourt Court where the company is registered.</br> Information exists if it's maintained in partner core data.  ATTENTION: In previous version the information was called districtCourt
     *
     * @return self
     */
    public function setRegisterCourt($registerCourt)
    {
        if (is_null($registerCourt)) {
            throw new \InvalidArgumentException('non-nullable registerCourt cannot be null');
        }
        $this->container['registerCourt'] = $registerCourt;

        return $this;
    }

    /**
     * Gets commercialRegisterNumber
     *
     * @return string|null
     */
    public function getCommercialRegisterNumber()
    {
        return $this->container['commercialRegisterNumber'];
    }

    /**
     * Sets commercialRegisterNumber
     *
     * @param string|null $commercialRegisterNumber Commercial register number. Unique in context of register court.</br> Information exists if it's maintained in partner core data.  ATTENTION: In previous version the information was called registerNumber
     *
     * @return self
     */
    public function setCommercialRegisterNumber($commercialRegisterNumber)
    {
        if (is_null($commercialRegisterNumber)) {
            throw new \InvalidArgumentException('non-nullable commercialRegisterNumber cannot be null');
        }
        $this->container['commercialRegisterNumber'] = $commercialRegisterNumber;

        return $this;
    }

    /**
     * Gets headOfSupervisoryBoard
     *
     * @return string|null
     */
    public function getHeadOfSupervisoryBoard()
    {
        return $this->container['headOfSupervisoryBoard'];
    }

    /**
     * Sets headOfSupervisoryBoard
     *
     * @param string|null $headOfSupervisoryBoard The partner's head of supervisory board.</br> Information exists if it's maintained in partner core data
     *
     * @return self
     */
    public function setHeadOfSupervisoryBoard($headOfSupervisoryBoard)
    {
        if (is_null($headOfSupervisoryBoard)) {
            throw new \InvalidArgumentException('non-nullable headOfSupervisoryBoard cannot be null');
        }
        $this->container['headOfSupervisoryBoard'] = $headOfSupervisoryBoard;

        return $this;
    }

    /**
     * Gets shopName
     *
     * @return string|null
     */
    public function getShopName()
    {
        return $this->container['shopName'];
    }

    /**
     * Sets shopName
     *
     * @param string|null $shopName Alias name of partner.</br> Information exists if it's maintained in partner core data
     *
     * @return self
     */
    public function setShopName($shopName)
    {
        if (is_null($shopName)) {
            throw new \InvalidArgumentException('non-nullable shopName cannot be null');
        }
        $this->container['shopName'] = $shopName;

        return $this;
    }

    /**
     * Gets weeeRegistrationNumber
     *
     * @return string|null
     */
    public function getWeeeRegistrationNumber()
    {
        return $this->container['weeeRegistrationNumber'];
    }

    /**
     * Sets weeeRegistrationNumber
     *
     * @param string|null $weeeRegistrationNumber WEEE registration number of partner.</br> Information exists if it's maintained in partner core data
     *
     * @return self
     */
    public function setWeeeRegistrationNumber($weeeRegistrationNumber)
    {
        if (is_null($weeeRegistrationNumber)) {
            throw new \InvalidArgumentException('non-nullable weeeRegistrationNumber cannot be null');
        }
        $this->container['weeeRegistrationNumber'] = $weeeRegistrationNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


