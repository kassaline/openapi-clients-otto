<?php
/**
 * PositionItemOrdersV4
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * PositionItemOrdersV4 Class Doc Comment
 *
 * @category Class
 * @description PositionItem
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PositionItemOrdersV4 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PositionItem__Orders-V4';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cancellationDate' => '\DateTime',
        'cancellationReason' => 'string',
        'dealId' => 'string',
        'dealName' => 'string',
        'expectedDeliveryDate' => '\DateTime',
        'fulfillmentStatus' => 'string',
        'itemValueDiscount' => '\OpenAPI\Client\Otto\Model\AmountOrdersV4',
        'itemValueGrossPrice' => '\OpenAPI\Client\Otto\Model\AmountOrdersV4',
        'itemValueReducedGrossPrice' => '\OpenAPI\Client\Otto\Model\AmountOrdersV4',
        'positionItemId' => 'string',
        'processableDate' => '\DateTime',
        'product' => '\OpenAPI\Client\Otto\Model\ProductOrdersV4',
        'returnAcceptedByMarketplace' => 'bool',
        'returnedDate' => '\DateTime',
        'sentDate' => '\DateTime',
        'trackingInfo' => '\OpenAPI\Client\Otto\Model\TrackingInfoOrdersV4',
        'weeePickup' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cancellationDate' => 'date-time',
        'cancellationReason' => null,
        'dealId' => null,
        'dealName' => null,
        'expectedDeliveryDate' => 'date-time',
        'fulfillmentStatus' => null,
        'itemValueDiscount' => null,
        'itemValueGrossPrice' => null,
        'itemValueReducedGrossPrice' => null,
        'positionItemId' => null,
        'processableDate' => 'date-time',
        'product' => null,
        'returnAcceptedByMarketplace' => null,
        'returnedDate' => 'date-time',
        'sentDate' => 'date-time',
        'trackingInfo' => null,
        'weeePickup' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cancellationDate' => false,
        'cancellationReason' => false,
        'dealId' => false,
        'dealName' => false,
        'expectedDeliveryDate' => false,
        'fulfillmentStatus' => false,
        'itemValueDiscount' => false,
        'itemValueGrossPrice' => false,
        'itemValueReducedGrossPrice' => false,
        'positionItemId' => false,
        'processableDate' => false,
        'product' => false,
        'returnAcceptedByMarketplace' => false,
        'returnedDate' => false,
        'sentDate' => false,
        'trackingInfo' => false,
        'weeePickup' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cancellationDate' => 'cancellationDate',
        'cancellationReason' => 'cancellationReason',
        'dealId' => 'dealId',
        'dealName' => 'dealName',
        'expectedDeliveryDate' => 'expectedDeliveryDate',
        'fulfillmentStatus' => 'fulfillmentStatus',
        'itemValueDiscount' => 'itemValueDiscount',
        'itemValueGrossPrice' => 'itemValueGrossPrice',
        'itemValueReducedGrossPrice' => 'itemValueReducedGrossPrice',
        'positionItemId' => 'positionItemId',
        'processableDate' => 'processableDate',
        'product' => 'product',
        'returnAcceptedByMarketplace' => 'returnAcceptedByMarketplace',
        'returnedDate' => 'returnedDate',
        'sentDate' => 'sentDate',
        'trackingInfo' => 'trackingInfo',
        'weeePickup' => 'weeePickup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cancellationDate' => 'setCancellationDate',
        'cancellationReason' => 'setCancellationReason',
        'dealId' => 'setDealId',
        'dealName' => 'setDealName',
        'expectedDeliveryDate' => 'setExpectedDeliveryDate',
        'fulfillmentStatus' => 'setFulfillmentStatus',
        'itemValueDiscount' => 'setItemValueDiscount',
        'itemValueGrossPrice' => 'setItemValueGrossPrice',
        'itemValueReducedGrossPrice' => 'setItemValueReducedGrossPrice',
        'positionItemId' => 'setPositionItemId',
        'processableDate' => 'setProcessableDate',
        'product' => 'setProduct',
        'returnAcceptedByMarketplace' => 'setReturnAcceptedByMarketplace',
        'returnedDate' => 'setReturnedDate',
        'sentDate' => 'setSentDate',
        'trackingInfo' => 'setTrackingInfo',
        'weeePickup' => 'setWeeePickup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cancellationDate' => 'getCancellationDate',
        'cancellationReason' => 'getCancellationReason',
        'dealId' => 'getDealId',
        'dealName' => 'getDealName',
        'expectedDeliveryDate' => 'getExpectedDeliveryDate',
        'fulfillmentStatus' => 'getFulfillmentStatus',
        'itemValueDiscount' => 'getItemValueDiscount',
        'itemValueGrossPrice' => 'getItemValueGrossPrice',
        'itemValueReducedGrossPrice' => 'getItemValueReducedGrossPrice',
        'positionItemId' => 'getPositionItemId',
        'processableDate' => 'getProcessableDate',
        'product' => 'getProduct',
        'returnAcceptedByMarketplace' => 'getReturnAcceptedByMarketplace',
        'returnedDate' => 'getReturnedDate',
        'sentDate' => 'getSentDate',
        'trackingInfo' => 'getTrackingInfo',
        'weeePickup' => 'getWeeePickup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CANCELLATION_REASON_CANCELLED_ON_CUSTOMER_WISH = 'CANCELLED_ON_CUSTOMER_WISH';
    public const CANCELLATION_REASON_CANCELLED_ON_PARTNER_WISH = 'CANCELLED_ON_PARTNER_WISH';
    public const CANCELLATION_REASON_PAYMENT_ABORTED = 'PAYMENT_ABORTED';
    public const CANCELLATION_REASON_PAYMENT_FRAUD = 'PAYMENT_FRAUD';
    public const CANCELLATION_REASON_PARTNER_TERMINATED = 'PARTNER_TERMINATED';
    public const CANCELLATION_REASON_ILLEGAL_PRODUCT = 'ILLEGAL_PRODUCT';
    public const CANCELLATION_REASON_MARKETPLACE_FRAUD = 'MARKETPLACE_FRAUD';
    public const CANCELLATION_REASON_CANCELLED_ON_MARKETPLACE_WISH = 'CANCELLED_ON_MARKETPLACE_WISH';
    public const FULFILLMENT_STATUS_ANNOUNCED = 'ANNOUNCED';
    public const FULFILLMENT_STATUS_PROCESSABLE = 'PROCESSABLE';
    public const FULFILLMENT_STATUS_SENT = 'SENT';
    public const FULFILLMENT_STATUS_RETURNED = 'RETURNED';
    public const FULFILLMENT_STATUS_CANCELLED_BY_PARTNER = 'CANCELLED_BY_PARTNER';
    public const FULFILLMENT_STATUS_CANCELLED_BY_MARKETPLACE = 'CANCELLED_BY_MARKETPLACE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCancellationReasonAllowableValues()
    {
        return [
            self::CANCELLATION_REASON_CANCELLED_ON_CUSTOMER_WISH,
            self::CANCELLATION_REASON_CANCELLED_ON_PARTNER_WISH,
            self::CANCELLATION_REASON_PAYMENT_ABORTED,
            self::CANCELLATION_REASON_PAYMENT_FRAUD,
            self::CANCELLATION_REASON_PARTNER_TERMINATED,
            self::CANCELLATION_REASON_ILLEGAL_PRODUCT,
            self::CANCELLATION_REASON_MARKETPLACE_FRAUD,
            self::CANCELLATION_REASON_CANCELLED_ON_MARKETPLACE_WISH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFulfillmentStatusAllowableValues()
    {
        return [
            self::FULFILLMENT_STATUS_ANNOUNCED,
            self::FULFILLMENT_STATUS_PROCESSABLE,
            self::FULFILLMENT_STATUS_SENT,
            self::FULFILLMENT_STATUS_RETURNED,
            self::FULFILLMENT_STATUS_CANCELLED_BY_PARTNER,
            self::FULFILLMENT_STATUS_CANCELLED_BY_MARKETPLACE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cancellationDate', $data ?? [], null);
        $this->setIfExists('cancellationReason', $data ?? [], null);
        $this->setIfExists('dealId', $data ?? [], null);
        $this->setIfExists('dealName', $data ?? [], null);
        $this->setIfExists('expectedDeliveryDate', $data ?? [], null);
        $this->setIfExists('fulfillmentStatus', $data ?? [], null);
        $this->setIfExists('itemValueDiscount', $data ?? [], null);
        $this->setIfExists('itemValueGrossPrice', $data ?? [], null);
        $this->setIfExists('itemValueReducedGrossPrice', $data ?? [], null);
        $this->setIfExists('positionItemId', $data ?? [], null);
        $this->setIfExists('processableDate', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('returnAcceptedByMarketplace', $data ?? [], null);
        $this->setIfExists('returnedDate', $data ?? [], null);
        $this->setIfExists('sentDate', $data ?? [], null);
        $this->setIfExists('trackingInfo', $data ?? [], null);
        $this->setIfExists('weeePickup', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCancellationReasonAllowableValues();
        if (!is_null($this->container['cancellationReason']) && !in_array($this->container['cancellationReason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cancellationReason', must be one of '%s'",
                $this->container['cancellationReason'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['fulfillmentStatus'] === null) {
            $invalidProperties[] = "'fulfillmentStatus' can't be null";
        }
        $allowedValues = $this->getFulfillmentStatusAllowableValues();
        if (!is_null($this->container['fulfillmentStatus']) && !in_array($this->container['fulfillmentStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fulfillmentStatus', must be one of '%s'",
                $this->container['fulfillmentStatus'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['itemValueGrossPrice'] === null) {
            $invalidProperties[] = "'itemValueGrossPrice' can't be null";
        }
        if ($this->container['positionItemId'] === null) {
            $invalidProperties[] = "'positionItemId' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cancellationDate
     *
     * @return \DateTime|null
     */
    public function getCancellationDate()
    {
        return $this->container['cancellationDate'];
    }

    /**
     * Sets cancellationDate
     *
     * @param \DateTime|null $cancellationDate Date the position item was cancelled
     *
     * @return self
     */
    public function setCancellationDate($cancellationDate)
    {
        if (is_null($cancellationDate)) {
            throw new \InvalidArgumentException('non-nullable cancellationDate cannot be null');
        }
        $this->container['cancellationDate'] = $cancellationDate;

        return $this;
    }

    /**
     * Gets cancellationReason
     *
     * @return string|null
     */
    public function getCancellationReason()
    {
        return $this->container['cancellationReason'];
    }

    /**
     * Sets cancellationReason
     *
     * @param string|null $cancellationReason Reason why a position was cancelled
     *
     * @return self
     */
    public function setCancellationReason($cancellationReason)
    {
        if (is_null($cancellationReason)) {
            throw new \InvalidArgumentException('non-nullable cancellationReason cannot be null');
        }
        $allowedValues = $this->getCancellationReasonAllowableValues();
        if (!in_array($cancellationReason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cancellationReason', must be one of '%s'",
                    $cancellationReason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cancellationReason'] = $cancellationReason;

        return $this;
    }

    /**
     * Gets dealId
     *
     * @return string|null
     */
    public function getDealId()
    {
        return $this->container['dealId'];
    }

    /**
     * Sets dealId
     *
     * @param string|null $dealId The unique id of the deal related to the position item
     *
     * @return self
     */
    public function setDealId($dealId)
    {
        if (is_null($dealId)) {
            throw new \InvalidArgumentException('non-nullable dealId cannot be null');
        }
        $this->container['dealId'] = $dealId;

        return $this;
    }

    /**
     * Gets dealName
     *
     * @return string|null
     */
    public function getDealName()
    {
        return $this->container['dealName'];
    }

    /**
     * Sets dealName
     *
     * @param string|null $dealName The name of the deal related to the position item
     *
     * @return self
     */
    public function setDealName($dealName)
    {
        if (is_null($dealName)) {
            throw new \InvalidArgumentException('non-nullable dealName cannot be null');
        }
        $this->container['dealName'] = $dealName;

        return $this;
    }

    /**
     * Gets expectedDeliveryDate
     *
     * @return \DateTime|null
     */
    public function getExpectedDeliveryDate()
    {
        return $this->container['expectedDeliveryDate'];
    }

    /**
     * Sets expectedDeliveryDate
     *
     * @param \DateTime|null $expectedDeliveryDate The date the position item should be delivered
     *
     * @return self
     */
    public function setExpectedDeliveryDate($expectedDeliveryDate)
    {
        if (is_null($expectedDeliveryDate)) {
            throw new \InvalidArgumentException('non-nullable expectedDeliveryDate cannot be null');
        }
        $this->container['expectedDeliveryDate'] = $expectedDeliveryDate;

        return $this;
    }

    /**
     * Gets fulfillmentStatus
     *
     * @return string
     */
    public function getFulfillmentStatus()
    {
        return $this->container['fulfillmentStatus'];
    }

    /**
     * Sets fulfillmentStatus
     *
     * @param string $fulfillmentStatus The fulfillment status of the position item
     *
     * @return self
     */
    public function setFulfillmentStatus($fulfillmentStatus)
    {
        if (is_null($fulfillmentStatus)) {
            throw new \InvalidArgumentException('non-nullable fulfillmentStatus cannot be null');
        }
        $allowedValues = $this->getFulfillmentStatusAllowableValues();
        if (!in_array($fulfillmentStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fulfillmentStatus', must be one of '%s'",
                    $fulfillmentStatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fulfillmentStatus'] = $fulfillmentStatus;

        return $this;
    }

    /**
     * Gets itemValueDiscount
     *
     * @return \OpenAPI\Client\Otto\Model\AmountOrdersV4|null
     */
    public function getItemValueDiscount()
    {
        return $this->container['itemValueDiscount'];
    }

    /**
     * Sets itemValueDiscount
     *
     * @param \OpenAPI\Client\Otto\Model\AmountOrdersV4|null $itemValueDiscount itemValueDiscount
     *
     * @return self
     */
    public function setItemValueDiscount($itemValueDiscount)
    {
        if (is_null($itemValueDiscount)) {
            throw new \InvalidArgumentException('non-nullable itemValueDiscount cannot be null');
        }
        $this->container['itemValueDiscount'] = $itemValueDiscount;

        return $this;
    }

    /**
     * Gets itemValueGrossPrice
     *
     * @return \OpenAPI\Client\Otto\Model\AmountOrdersV4
     */
    public function getItemValueGrossPrice()
    {
        return $this->container['itemValueGrossPrice'];
    }

    /**
     * Sets itemValueGrossPrice
     *
     * @param \OpenAPI\Client\Otto\Model\AmountOrdersV4 $itemValueGrossPrice itemValueGrossPrice
     *
     * @return self
     */
    public function setItemValueGrossPrice($itemValueGrossPrice)
    {
        if (is_null($itemValueGrossPrice)) {
            throw new \InvalidArgumentException('non-nullable itemValueGrossPrice cannot be null');
        }
        $this->container['itemValueGrossPrice'] = $itemValueGrossPrice;

        return $this;
    }

    /**
     * Gets itemValueReducedGrossPrice
     *
     * @return \OpenAPI\Client\Otto\Model\AmountOrdersV4|null
     */
    public function getItemValueReducedGrossPrice()
    {
        return $this->container['itemValueReducedGrossPrice'];
    }

    /**
     * Sets itemValueReducedGrossPrice
     *
     * @param \OpenAPI\Client\Otto\Model\AmountOrdersV4|null $itemValueReducedGrossPrice itemValueReducedGrossPrice
     *
     * @return self
     */
    public function setItemValueReducedGrossPrice($itemValueReducedGrossPrice)
    {
        if (is_null($itemValueReducedGrossPrice)) {
            throw new \InvalidArgumentException('non-nullable itemValueReducedGrossPrice cannot be null');
        }
        $this->container['itemValueReducedGrossPrice'] = $itemValueReducedGrossPrice;

        return $this;
    }

    /**
     * Gets positionItemId
     *
     * @return string
     */
    public function getPositionItemId()
    {
        return $this->container['positionItemId'];
    }

    /**
     * Sets positionItemId
     *
     * @param string $positionItemId The unique id of the position item
     *
     * @return self
     */
    public function setPositionItemId($positionItemId)
    {
        if (is_null($positionItemId)) {
            throw new \InvalidArgumentException('non-nullable positionItemId cannot be null');
        }
        $this->container['positionItemId'] = $positionItemId;

        return $this;
    }

    /**
     * Gets processableDate
     *
     * @return \DateTime|null
     */
    public function getProcessableDate()
    {
        return $this->container['processableDate'];
    }

    /**
     * Sets processableDate
     *
     * @param \DateTime|null $processableDate Date the position item has reached PROCESSABLE fulfillment status
     *
     * @return self
     */
    public function setProcessableDate($processableDate)
    {
        if (is_null($processableDate)) {
            throw new \InvalidArgumentException('non-nullable processableDate cannot be null');
        }
        $this->container['processableDate'] = $processableDate;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \OpenAPI\Client\Otto\Model\ProductOrdersV4
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \OpenAPI\Client\Otto\Model\ProductOrdersV4 $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets returnAcceptedByMarketplace
     *
     * @return bool|null
     */
    public function getReturnAcceptedByMarketplace()
    {
        return $this->container['returnAcceptedByMarketplace'];
    }

    /**
     * Sets returnAcceptedByMarketplace
     *
     * @param bool|null $returnAcceptedByMarketplace Flag to indicate that the return has been accepted by the marketplace
     *
     * @return self
     */
    public function setReturnAcceptedByMarketplace($returnAcceptedByMarketplace)
    {
        if (is_null($returnAcceptedByMarketplace)) {
            throw new \InvalidArgumentException('non-nullable returnAcceptedByMarketplace cannot be null');
        }
        $this->container['returnAcceptedByMarketplace'] = $returnAcceptedByMarketplace;

        return $this;
    }

    /**
     * Gets returnedDate
     *
     * @return \DateTime|null
     */
    public function getReturnedDate()
    {
        return $this->container['returnedDate'];
    }

    /**
     * Sets returnedDate
     *
     * @param \DateTime|null $returnedDate Date the position item was returned
     *
     * @return self
     */
    public function setReturnedDate($returnedDate)
    {
        if (is_null($returnedDate)) {
            throw new \InvalidArgumentException('non-nullable returnedDate cannot be null');
        }
        $this->container['returnedDate'] = $returnedDate;

        return $this;
    }

    /**
     * Gets sentDate
     *
     * @return \DateTime|null
     */
    public function getSentDate()
    {
        return $this->container['sentDate'];
    }

    /**
     * Sets sentDate
     *
     * @param \DateTime|null $sentDate Date the position item was sent
     *
     * @return self
     */
    public function setSentDate($sentDate)
    {
        if (is_null($sentDate)) {
            throw new \InvalidArgumentException('non-nullable sentDate cannot be null');
        }
        $this->container['sentDate'] = $sentDate;

        return $this;
    }

    /**
     * Gets trackingInfo
     *
     * @return \OpenAPI\Client\Otto\Model\TrackingInfoOrdersV4|null
     */
    public function getTrackingInfo()
    {
        return $this->container['trackingInfo'];
    }

    /**
     * Sets trackingInfo
     *
     * @param \OpenAPI\Client\Otto\Model\TrackingInfoOrdersV4|null $trackingInfo trackingInfo
     *
     * @return self
     */
    public function setTrackingInfo($trackingInfo)
    {
        if (is_null($trackingInfo)) {
            throw new \InvalidArgumentException('non-nullable trackingInfo cannot be null');
        }
        $this->container['trackingInfo'] = $trackingInfo;

        return $this;
    }

    /**
     * Gets weeePickup
     *
     * @return bool|null
     */
    public function getWeeePickup()
    {
        return $this->container['weeePickup'];
    }

    /**
     * Sets weeePickup
     *
     * @param bool|null $weeePickup Position item has electrical and electronic equipment disposal service (WEEE)
     *
     * @return self
     */
    public function setWeeePickup($weeePickup)
    {
        if (is_null($weeePickup)) {
            throw new \InvalidArgumentException('non-nullable weeePickup cannot be null');
        }
        $this->container['weeePickup'] = $weeePickup;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


