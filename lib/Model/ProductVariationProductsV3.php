<?php
/**
 * ProductVariationProductsV3
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * ProductVariationProductsV3 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductVariationProductsV3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductVariation__Products-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'productReference' => 'string',
        'sku' => 'string',
        'ean' => 'string',
        'pzn' => 'string',
        'mpn' => 'string',
        'moin' => 'string',
        'releaseDate' => '\DateTime',
        'productDescription' => '\OpenAPI\Client\Otto\Model\ProductDescriptionProductsV3',
        'mediaAssets' => '\OpenAPI\Client\Otto\Model\MediaAssetProductsV3[]',
        'order' => '\OpenAPI\Client\Otto\Model\OrderProductsV3',
        'delivery' => '\OpenAPI\Client\Otto\Model\DeliveryProductsV3',
        'pricing' => '\OpenAPI\Client\Otto\Model\PricingProductsV3',
        'logistics' => '\OpenAPI\Client\Otto\Model\LogisticsProductsV3',
        'productSafety' => '\OpenAPI\Client\Otto\Model\ProductSafetyProductsV3'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'productReference' => null,
        'sku' => null,
        'ean' => null,
        'pzn' => null,
        'mpn' => null,
        'moin' => null,
        'releaseDate' => 'date-time',
        'productDescription' => null,
        'mediaAssets' => null,
        'order' => null,
        'delivery' => null,
        'pricing' => null,
        'logistics' => null,
        'productSafety' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'productReference' => false,
        'sku' => false,
        'ean' => false,
        'pzn' => false,
        'mpn' => false,
        'moin' => false,
        'releaseDate' => false,
        'productDescription' => false,
        'mediaAssets' => false,
        'order' => false,
        'delivery' => false,
        'pricing' => false,
        'logistics' => false,
        'productSafety' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'productReference' => 'productReference',
        'sku' => 'sku',
        'ean' => 'ean',
        'pzn' => 'pzn',
        'mpn' => 'mpn',
        'moin' => 'moin',
        'releaseDate' => 'releaseDate',
        'productDescription' => 'productDescription',
        'mediaAssets' => 'mediaAssets',
        'order' => 'order',
        'delivery' => 'delivery',
        'pricing' => 'pricing',
        'logistics' => 'logistics',
        'productSafety' => 'productSafety'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'productReference' => 'setProductReference',
        'sku' => 'setSku',
        'ean' => 'setEan',
        'pzn' => 'setPzn',
        'mpn' => 'setMpn',
        'moin' => 'setMoin',
        'releaseDate' => 'setReleaseDate',
        'productDescription' => 'setProductDescription',
        'mediaAssets' => 'setMediaAssets',
        'order' => 'setOrder',
        'delivery' => 'setDelivery',
        'pricing' => 'setPricing',
        'logistics' => 'setLogistics',
        'productSafety' => 'setProductSafety'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'productReference' => 'getProductReference',
        'sku' => 'getSku',
        'ean' => 'getEan',
        'pzn' => 'getPzn',
        'mpn' => 'getMpn',
        'moin' => 'getMoin',
        'releaseDate' => 'getReleaseDate',
        'productDescription' => 'getProductDescription',
        'mediaAssets' => 'getMediaAssets',
        'order' => 'getOrder',
        'delivery' => 'getDelivery',
        'pricing' => 'getPricing',
        'logistics' => 'getLogistics',
        'productSafety' => 'getProductSafety'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('productReference', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('pzn', $data ?? [], null);
        $this->setIfExists('mpn', $data ?? [], null);
        $this->setIfExists('moin', $data ?? [], null);
        $this->setIfExists('releaseDate', $data ?? [], null);
        $this->setIfExists('productDescription', $data ?? [], null);
        $this->setIfExists('mediaAssets', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('pricing', $data ?? [], null);
        $this->setIfExists('logistics', $data ?? [], null);
        $this->setIfExists('productSafety', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['productReference'] === null) {
            $invalidProperties[] = "'productReference' can't be null";
        }
        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ($this->container['ean'] === null) {
            $invalidProperties[] = "'ean' can't be null";
        }
        if ($this->container['productDescription'] === null) {
            $invalidProperties[] = "'productDescription' can't be null";
        }
        if ($this->container['mediaAssets'] === null) {
            $invalidProperties[] = "'mediaAssets' can't be null";
        }
        if ($this->container['delivery'] === null) {
            $invalidProperties[] = "'delivery' can't be null";
        }
        if ($this->container['pricing'] === null) {
            $invalidProperties[] = "'pricing' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets productReference
     *
     * @return string
     */
    public function getProductReference()
    {
        return $this->container['productReference'];
    }

    /**
     * Sets productReference
     *
     * @param string $productReference The productReference groups all variations, that you want to combine into one product. This is not visible to the customer. The productReference can be freely assigned and may consist of maximum 50 characters. You can only use the productReference once within your product catalog. You should therefore use a value that makes sense for all variations of the product and does not refer to any specifics of a particular variation. You will find the product reference, for example, in the product overview in the portal.
     *
     * @return self
     */
    public function setProductReference($productReference)
    {
        if (is_null($productReference)) {
            throw new \InvalidArgumentException('non-nullable productReference cannot be null');
        }
        $this->container['productReference'] = $productReference;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku Identifier for a product variation, provided by the partner, must be unique for a partner. It is mandatory and may consist of a maximum of 50 characters.
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean External identifier of a product, must be unique in a partner assortment, must not start with a 2.
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            throw new \InvalidArgumentException('non-nullable ean cannot be null');
        }
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets pzn
     *
     * @return string|null
     */
    public function getPzn()
    {
        return $this->container['pzn'];
    }

    /**
     * Sets pzn
     *
     * @param string|null $pzn Pharmazentralnummer, a german standard for identifying pharmaceutical products.
     *
     * @return self
     */
    public function setPzn($pzn)
    {
        if (is_null($pzn)) {
            throw new \InvalidArgumentException('non-nullable pzn cannot be null');
        }
        $this->container['pzn'] = $pzn;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string|null
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string|null $mpn Manufacturer part number, may consist of a maximum of 50 characters.
     *
     * @return self
     */
    public function setMpn($mpn)
    {
        if (is_null($mpn)) {
            throw new \InvalidArgumentException('non-nullable mpn cannot be null');
        }
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets moin
     *
     * @return string|null
     */
    public function getMoin()
    {
        return $this->container['moin'];
    }

    /**
     * Sets moin
     *
     * @param string|null $moin Is an identifier, generated by the OTTO marketplace, for a product variation together with the associated content. Is used in the context of \"Wettbewerb am Artikel\" to confirm the content of the existing variation and its correctness and to put the own offer live for this variation.
     *
     * @return self
     */
    public function setMoin($moin)
    {
        if (is_null($moin)) {
            throw new \InvalidArgumentException('non-nullable moin cannot be null');
        }
        $this->container['moin'] = $moin;

        return $this;
    }

    /**
     * Gets releaseDate
     *
     * @return \DateTime|null
     */
    public function getReleaseDate()
    {
        return $this->container['releaseDate'];
    }

    /**
     * Sets releaseDate
     *
     * @param \DateTime|null $releaseDate ISO8601 Date (e.g. 2024-08-01T08:00:00+0100) on which the product is released by the manufacturer, e.g. computer games.
     *
     * @return self
     */
    public function setReleaseDate($releaseDate)
    {
        if (is_null($releaseDate)) {
            throw new \InvalidArgumentException('non-nullable releaseDate cannot be null');
        }
        $this->container['releaseDate'] = $releaseDate;

        return $this;
    }

    /**
     * Gets productDescription
     *
     * @return \OpenAPI\Client\Otto\Model\ProductDescriptionProductsV3
     */
    public function getProductDescription()
    {
        return $this->container['productDescription'];
    }

    /**
     * Sets productDescription
     *
     * @param \OpenAPI\Client\Otto\Model\ProductDescriptionProductsV3 $productDescription productDescription
     *
     * @return self
     */
    public function setProductDescription($productDescription)
    {
        if (is_null($productDescription)) {
            throw new \InvalidArgumentException('non-nullable productDescription cannot be null');
        }
        $this->container['productDescription'] = $productDescription;

        return $this;
    }

    /**
     * Gets mediaAssets
     *
     * @return \OpenAPI\Client\Otto\Model\MediaAssetProductsV3[]
     */
    public function getMediaAssets()
    {
        return $this->container['mediaAssets'];
    }

    /**
     * Sets mediaAssets
     *
     * @param \OpenAPI\Client\Otto\Model\MediaAssetProductsV3[] $mediaAssets A list of media assets describing this product variation. Currently these may only be static images of the types JPG or PNG with a RGB color space. Furthermore the images have to have a minimum size of 500 x 1000 pixel and a maximum width of 4500 pixel.
     *
     * @return self
     */
    public function setMediaAssets($mediaAssets)
    {
        if (is_null($mediaAssets)) {
            throw new \InvalidArgumentException('non-nullable mediaAssets cannot be null');
        }
        $this->container['mediaAssets'] = $mediaAssets;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \OpenAPI\Client\Otto\Model\OrderProductsV3|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \OpenAPI\Client\Otto\Model\OrderProductsV3|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \OpenAPI\Client\Otto\Model\DeliveryProductsV3
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param \OpenAPI\Client\Otto\Model\DeliveryProductsV3 $delivery delivery
     *
     * @return self
     */
    public function setDelivery($delivery)
    {
        if (is_null($delivery)) {
            throw new \InvalidArgumentException('non-nullable delivery cannot be null');
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets pricing
     *
     * @return \OpenAPI\Client\Otto\Model\PricingProductsV3
     */
    public function getPricing()
    {
        return $this->container['pricing'];
    }

    /**
     * Sets pricing
     *
     * @param \OpenAPI\Client\Otto\Model\PricingProductsV3 $pricing pricing
     *
     * @return self
     */
    public function setPricing($pricing)
    {
        if (is_null($pricing)) {
            throw new \InvalidArgumentException('non-nullable pricing cannot be null');
        }
        $this->container['pricing'] = $pricing;

        return $this;
    }

    /**
     * Gets logistics
     *
     * @return \OpenAPI\Client\Otto\Model\LogisticsProductsV3|null
     */
    public function getLogistics()
    {
        return $this->container['logistics'];
    }

    /**
     * Sets logistics
     *
     * @param \OpenAPI\Client\Otto\Model\LogisticsProductsV3|null $logistics logistics
     *
     * @return self
     */
    public function setLogistics($logistics)
    {
        if (is_null($logistics)) {
            throw new \InvalidArgumentException('non-nullable logistics cannot be null');
        }
        $this->container['logistics'] = $logistics;

        return $this;
    }

    /**
     * Gets productSafety
     *
     * @return \OpenAPI\Client\Otto\Model\ProductSafetyProductsV3|null
     */
    public function getProductSafety()
    {
        return $this->container['productSafety'];
    }

    /**
     * Sets productSafety
     *
     * @param \OpenAPI\Client\Otto\Model\ProductSafetyProductsV3|null $productSafety productSafety
     *
     * @return self
     */
    public function setProductSafety($productSafety)
    {
        if (is_null($productSafety)) {
            throw new \InvalidArgumentException('non-nullable productSafety cannot be null');
        }
        $this->container['productSafety'] = $productSafety;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


