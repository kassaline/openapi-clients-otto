<?php
/**
 * LineItemsReceiptsV3
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * LineItemsReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description Line items for which settlement is made.  ATTENTION: * In previous version this name was used for  itemPositions only. Now there is a substructure that cares about all billing object of a receipt * The object is currently define by mistake as required, we will change it in future as itâ€™s possible that we introduce new receiptTypes without lineItems. For current receiptTypes PURCHASE, PARTIAL_REFUND and REFUND lineItems will always exists.
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LineItemsReceiptsV3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LineItems__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'itemPositions' => '\OpenAPI\Client\Otto\Model\ItemPositionReceiptsV3[]',
        'itemPartialRefundPositions' => '\OpenAPI\Client\Otto\Model\ItemPartialRefundPositionReceiptsV3[]',
        'servicePositions' => '\OpenAPI\Client\Otto\Model\ServicePositionReceiptsV3[]',
        'servicePartialRefundPositions' => '\OpenAPI\Client\Otto\Model\ServicePartialRefundPositionReceiptsV3[]',
        'deliveryCosts' => '\OpenAPI\Client\Otto\Model\DeliveryCostReceiptsV3[]',
        'deliveryFeePartialRefundPositions' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'itemPositions' => null,
        'itemPartialRefundPositions' => null,
        'servicePositions' => null,
        'servicePartialRefundPositions' => null,
        'deliveryCosts' => null,
        'deliveryFeePartialRefundPositions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'itemPositions' => false,
        'itemPartialRefundPositions' => false,
        'servicePositions' => false,
        'servicePartialRefundPositions' => false,
        'deliveryCosts' => false,
        'deliveryFeePartialRefundPositions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'itemPositions' => 'itemPositions',
        'itemPartialRefundPositions' => 'itemPartialRefundPositions',
        'servicePositions' => 'servicePositions',
        'servicePartialRefundPositions' => 'servicePartialRefundPositions',
        'deliveryCosts' => 'deliveryCosts',
        'deliveryFeePartialRefundPositions' => 'deliveryFeePartialRefundPositions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'itemPositions' => 'setItemPositions',
        'itemPartialRefundPositions' => 'setItemPartialRefundPositions',
        'servicePositions' => 'setServicePositions',
        'servicePartialRefundPositions' => 'setServicePartialRefundPositions',
        'deliveryCosts' => 'setDeliveryCosts',
        'deliveryFeePartialRefundPositions' => 'setDeliveryFeePartialRefundPositions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'itemPositions' => 'getItemPositions',
        'itemPartialRefundPositions' => 'getItemPartialRefundPositions',
        'servicePositions' => 'getServicePositions',
        'servicePartialRefundPositions' => 'getServicePartialRefundPositions',
        'deliveryCosts' => 'getDeliveryCosts',
        'deliveryFeePartialRefundPositions' => 'getDeliveryFeePartialRefundPositions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('itemPositions', $data ?? [], null);
        $this->setIfExists('itemPartialRefundPositions', $data ?? [], null);
        $this->setIfExists('servicePositions', $data ?? [], null);
        $this->setIfExists('servicePartialRefundPositions', $data ?? [], null);
        $this->setIfExists('deliveryCosts', $data ?? [], null);
        $this->setIfExists('deliveryFeePartialRefundPositions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['itemPositions'] === null) {
            $invalidProperties[] = "'itemPositions' can't be null";
        }
        if ($this->container['itemPartialRefundPositions'] === null) {
            $invalidProperties[] = "'itemPartialRefundPositions' can't be null";
        }
        if ($this->container['servicePositions'] === null) {
            $invalidProperties[] = "'servicePositions' can't be null";
        }
        if ($this->container['servicePartialRefundPositions'] === null) {
            $invalidProperties[] = "'servicePartialRefundPositions' can't be null";
        }
        if ($this->container['deliveryCosts'] === null) {
            $invalidProperties[] = "'deliveryCosts' can't be null";
        }
        if ($this->container['deliveryFeePartialRefundPositions'] === null) {
            $invalidProperties[] = "'deliveryFeePartialRefundPositions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets itemPositions
     *
     * @return \OpenAPI\Client\Otto\Model\ItemPositionReceiptsV3[]
     */
    public function getItemPositions()
    {
        return $this->container['itemPositions'];
    }

    /**
     * Sets itemPositions
     *
     * @param \OpenAPI\Client\Otto\Model\ItemPositionReceiptsV3[] $itemPositions List of billed items, if exists. </br>This list is only used in context of receiptType PURCHASE or REFUND. </br>If there are no entries the lists is displayed as empty
     *
     * @return self
     */
    public function setItemPositions($itemPositions)
    {
        if (is_null($itemPositions)) {
            throw new \InvalidArgumentException('non-nullable itemPositions cannot be null');
        }
        $this->container['itemPositions'] = $itemPositions;

        return $this;
    }

    /**
     * Gets itemPartialRefundPositions
     *
     * @return \OpenAPI\Client\Otto\Model\ItemPartialRefundPositionReceiptsV3[]
     */
    public function getItemPartialRefundPositions()
    {
        return $this->container['itemPartialRefundPositions'];
    }

    /**
     * Sets itemPartialRefundPositions
     *
     * @param \OpenAPI\Client\Otto\Model\ItemPartialRefundPositionReceiptsV3[] $itemPartialRefundPositions List of billed partial refunds of items. </br>This list is only used in context of receiptType PARTIAL_REFUND. </br>If there are no entries the lists is displayed as empty
     *
     * @return self
     */
    public function setItemPartialRefundPositions($itemPartialRefundPositions)
    {
        if (is_null($itemPartialRefundPositions)) {
            throw new \InvalidArgumentException('non-nullable itemPartialRefundPositions cannot be null');
        }
        $this->container['itemPartialRefundPositions'] = $itemPartialRefundPositions;

        return $this;
    }

    /**
     * Gets servicePositions
     *
     * @return \OpenAPI\Client\Otto\Model\ServicePositionReceiptsV3[]
     */
    public function getServicePositions()
    {
        return $this->container['servicePositions'];
    }

    /**
     * Sets servicePositions
     *
     * @param \OpenAPI\Client\Otto\Model\ServicePositionReceiptsV3[] $servicePositions List of billed B2C services, if exists for this receipt. </br>This list is only used in context of receiptType PURCHASE or REFUND. </br>If there are no entries the lists is displayed as empty
     *
     * @return self
     */
    public function setServicePositions($servicePositions)
    {
        if (is_null($servicePositions)) {
            throw new \InvalidArgumentException('non-nullable servicePositions cannot be null');
        }
        $this->container['servicePositions'] = $servicePositions;

        return $this;
    }

    /**
     * Gets servicePartialRefundPositions
     *
     * @return \OpenAPI\Client\Otto\Model\ServicePartialRefundPositionReceiptsV3[]
     */
    public function getServicePartialRefundPositions()
    {
        return $this->container['servicePartialRefundPositions'];
    }

    /**
     * Sets servicePartialRefundPositions
     *
     * @param \OpenAPI\Client\Otto\Model\ServicePartialRefundPositionReceiptsV3[] $servicePartialRefundPositions List of billed partial refunds of services.
     *
     * @return self
     */
    public function setServicePartialRefundPositions($servicePartialRefundPositions)
    {
        if (is_null($servicePartialRefundPositions)) {
            throw new \InvalidArgumentException('non-nullable servicePartialRefundPositions cannot be null');
        }
        $this->container['servicePartialRefundPositions'] = $servicePartialRefundPositions;

        return $this;
    }

    /**
     * Gets deliveryCosts
     *
     * @return \OpenAPI\Client\Otto\Model\DeliveryCostReceiptsV3[]
     */
    public function getDeliveryCosts()
    {
        return $this->container['deliveryCosts'];
    }

    /**
     * Sets deliveryCosts
     *
     * @param \OpenAPI\Client\Otto\Model\DeliveryCostReceiptsV3[] $deliveryCosts List of billed logistic costs, if exists for this receipt. </br>This list is only used in context of receiptType PURCHASE or REFUND. </br>If there are no entries the lists is displayed as empty
     *
     * @return self
     */
    public function setDeliveryCosts($deliveryCosts)
    {
        if (is_null($deliveryCosts)) {
            throw new \InvalidArgumentException('non-nullable deliveryCosts cannot be null');
        }
        $this->container['deliveryCosts'] = $deliveryCosts;

        return $this;
    }

    /**
     * Gets deliveryFeePartialRefundPositions
     *
     * @return object[]
     */
    public function getDeliveryFeePartialRefundPositions()
    {
        return $this->container['deliveryFeePartialRefundPositions'];
    }

    /**
     * Sets deliveryFeePartialRefundPositions
     *
     * @param object[] $deliveryFeePartialRefundPositions This information is currently not available, will be an empty array.
     *
     * @return self
     */
    public function setDeliveryFeePartialRefundPositions($deliveryFeePartialRefundPositions)
    {
        if (is_null($deliveryFeePartialRefundPositions)) {
            throw new \InvalidArgumentException('non-nullable deliveryFeePartialRefundPositions cannot be null');
        }
        $this->container['deliveryFeePartialRefundPositions'] = $deliveryFeePartialRefundPositions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


