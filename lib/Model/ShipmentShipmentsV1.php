<?php
/**
 * ShipmentShipmentsV1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * ShipmentShipmentsV1 Class Doc Comment
 *
 * @category Class
 * @description A shipment with full details.
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentShipmentsV1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shipment__Shipments-V1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shipmentId' => 'string',
        'creationDate' => 'string',
        'trackingKey' => '\OpenAPI\Client\Otto\Model\TrackingKeyShipmentsV1',
        'shipDate' => 'string',
        'shipFromAddress' => '\OpenAPI\Client\Otto\Model\AddressShipmentsV1',
        'positionItems' => '\OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[]',
        'states' => '\OpenAPI\Client\Otto\Model\ShipmentStateShipmentsV1[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shipmentId' => null,
        'creationDate' => null,
        'trackingKey' => null,
        'shipDate' => null,
        'shipFromAddress' => null,
        'positionItems' => null,
        'states' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shipmentId' => false,
        'creationDate' => false,
        'trackingKey' => false,
        'shipDate' => false,
        'shipFromAddress' => false,
        'positionItems' => false,
        'states' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipmentId' => 'shipmentId',
        'creationDate' => 'creationDate',
        'trackingKey' => 'trackingKey',
        'shipDate' => 'shipDate',
        'shipFromAddress' => 'shipFromAddress',
        'positionItems' => 'positionItems',
        'states' => 'states'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipmentId' => 'setShipmentId',
        'creationDate' => 'setCreationDate',
        'trackingKey' => 'setTrackingKey',
        'shipDate' => 'setShipDate',
        'shipFromAddress' => 'setShipFromAddress',
        'positionItems' => 'setPositionItems',
        'states' => 'setStates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipmentId' => 'getShipmentId',
        'creationDate' => 'getCreationDate',
        'trackingKey' => 'getTrackingKey',
        'shipDate' => 'getShipDate',
        'shipFromAddress' => 'getShipFromAddress',
        'positionItems' => 'getPositionItems',
        'states' => 'getStates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shipmentId', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('trackingKey', $data ?? [], null);
        $this->setIfExists('shipDate', $data ?? [], null);
        $this->setIfExists('shipFromAddress', $data ?? [], null);
        $this->setIfExists('positionItems', $data ?? [], null);
        $this->setIfExists('states', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['positionItems']) && (count($this->container['positionItems']) < 1)) {
            $invalidProperties[] = "invalid value for 'positionItems', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['states']) && (count($this->container['states']) < 0)) {
            $invalidProperties[] = "invalid value for 'states', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipmentId
     *
     * @return string|null
     */
    public function getShipmentId()
    {
        return $this->container['shipmentId'];
    }

    /**
     * Sets shipmentId
     *
     * @param string|null $shipmentId Internal shipment identifier assigned by OTTO Market.
     *
     * @return self
     */
    public function setShipmentId($shipmentId)
    {
        if (is_null($shipmentId)) {
            throw new \InvalidArgumentException('non-nullable shipmentId cannot be null');
        }
        $this->container['shipmentId'] = $shipmentId;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param string|null $creationDate creationDate
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets trackingKey
     *
     * @return \OpenAPI\Client\Otto\Model\TrackingKeyShipmentsV1|null
     */
    public function getTrackingKey()
    {
        return $this->container['trackingKey'];
    }

    /**
     * Sets trackingKey
     *
     * @param \OpenAPI\Client\Otto\Model\TrackingKeyShipmentsV1|null $trackingKey trackingKey
     *
     * @return self
     */
    public function setTrackingKey($trackingKey)
    {
        if (is_null($trackingKey)) {
            throw new \InvalidArgumentException('non-nullable trackingKey cannot be null');
        }
        $this->container['trackingKey'] = $trackingKey;

        return $this;
    }

    /**
     * Gets shipDate
     *
     * @return string|null
     */
    public function getShipDate()
    {
        return $this->container['shipDate'];
    }

    /**
     * Sets shipDate
     *
     * @param string|null $shipDate shipDate
     *
     * @return self
     */
    public function setShipDate($shipDate)
    {
        if (is_null($shipDate)) {
            throw new \InvalidArgumentException('non-nullable shipDate cannot be null');
        }
        $this->container['shipDate'] = $shipDate;

        return $this;
    }

    /**
     * Gets shipFromAddress
     *
     * @return \OpenAPI\Client\Otto\Model\AddressShipmentsV1|null
     */
    public function getShipFromAddress()
    {
        return $this->container['shipFromAddress'];
    }

    /**
     * Sets shipFromAddress
     *
     * @param \OpenAPI\Client\Otto\Model\AddressShipmentsV1|null $shipFromAddress shipFromAddress
     *
     * @return self
     */
    public function setShipFromAddress($shipFromAddress)
    {
        if (is_null($shipFromAddress)) {
            throw new \InvalidArgumentException('non-nullable shipFromAddress cannot be null');
        }
        $this->container['shipFromAddress'] = $shipFromAddress;

        return $this;
    }

    /**
     * Gets positionItems
     *
     * @return \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[]|null
     */
    public function getPositionItems()
    {
        return $this->container['positionItems'];
    }

    /**
     * Sets positionItems
     *
     * @param \OpenAPI\Client\Otto\Model\PositionItemShipmentsV1[]|null $positionItems The position items included in the shipment.
     *
     * @return self
     */
    public function setPositionItems($positionItems)
    {
        if (is_null($positionItems)) {
            throw new \InvalidArgumentException('non-nullable positionItems cannot be null');
        }


        if ((count($positionItems) < 1)) {
            throw new \InvalidArgumentException('invalid length for $positionItems when calling ShipmentShipmentsV1., number of items must be greater than or equal to 1.');
        }
        $this->container['positionItems'] = $positionItems;

        return $this;
    }

    /**
     * Gets states
     *
     * @return \OpenAPI\Client\Otto\Model\ShipmentStateShipmentsV1[]|null
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param \OpenAPI\Client\Otto\Model\ShipmentStateShipmentsV1[]|null $states The history of tracking states of the shipment
     *
     * @return self
     */
    public function setStates($states)
    {
        if (is_null($states)) {
            throw new \InvalidArgumentException('non-nullable states cannot be null');
        }


        if ((count($states) < 0)) {
            throw new \InvalidArgumentException('invalid length for $states when calling ShipmentShipmentsV1., number of items must be greater than or equal to 0.');
        }
        $this->container['states'] = $states;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


