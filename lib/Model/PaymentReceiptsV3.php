<?php
/**
 * PaymentReceiptsV3
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * PaymentReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description Payment details
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentReceiptsV3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payment__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'paymentProvider' => 'string',
        'paymentMethod' => 'string',
        'installmentCount' => 'int',
        'paymentBreak' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'paymentProvider' => null,
        'paymentMethod' => null,
        'installmentCount' => 'int32',
        'paymentBreak' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'paymentProvider' => false,
        'paymentMethod' => false,
        'installmentCount' => false,
        'paymentBreak' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paymentProvider' => 'paymentProvider',
        'paymentMethod' => 'paymentMethod',
        'installmentCount' => 'installmentCount',
        'paymentBreak' => 'paymentBreak'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paymentProvider' => 'setPaymentProvider',
        'paymentMethod' => 'setPaymentMethod',
        'installmentCount' => 'setInstallmentCount',
        'paymentBreak' => 'setPaymentBreak'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paymentProvider' => 'getPaymentProvider',
        'paymentMethod' => 'getPaymentMethod',
        'installmentCount' => 'getInstallmentCount',
        'paymentBreak' => 'getPaymentBreak'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_PROVIDER_PLAZA = 'PLAZA';
    public const PAYMENT_PROVIDER_OTTOPAYMENTS = 'OTTOPAYMENTS';
    public const PAYMENT_METHOD_CREDIT_CARD_ONLINE = 'CREDIT_CARD_ONLINE';
    public const PAYMENT_METHOD_INVOICE_SINGLE = 'INVOICE_SINGLE';
    public const PAYMENT_METHOD_INVOICE_INSTALLMENTS = 'INVOICE_INSTALLMENTS';
    public const PAYMENT_METHOD_DIRECT_DEBIT_INSTALLMENTS = 'DIRECT_DEBIT_INSTALLMENTS';
    public const PAYMENT_METHOD_PREPAYMENT = 'PREPAYMENT';
    public const PAYMENT_METHOD_PAYPAL = 'PAYPAL';
    public const PAYMENT_METHOD_DIRECT_DEBIT = 'DIRECT_DEBIT';
    public const PAYMENT_METHOD_CREDIT_CARD = 'CREDIT_CARD';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentProviderAllowableValues()
    {
        return [
            self::PAYMENT_PROVIDER_PLAZA,
            self::PAYMENT_PROVIDER_OTTOPAYMENTS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_CREDIT_CARD_ONLINE,
            self::PAYMENT_METHOD_INVOICE_SINGLE,
            self::PAYMENT_METHOD_INVOICE_INSTALLMENTS,
            self::PAYMENT_METHOD_DIRECT_DEBIT_INSTALLMENTS,
            self::PAYMENT_METHOD_PREPAYMENT,
            self::PAYMENT_METHOD_PAYPAL,
            self::PAYMENT_METHOD_DIRECT_DEBIT,
            self::PAYMENT_METHOD_CREDIT_CARD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('paymentProvider', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('installmentCount', $data ?? [], null);
        $this->setIfExists('paymentBreak', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['paymentProvider'] === null) {
            $invalidProperties[] = "'paymentProvider' can't be null";
        }
        $allowedValues = $this->getPaymentProviderAllowableValues();
        if (!is_null($this->container['paymentProvider']) && !in_array($this->container['paymentProvider'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paymentProvider', must be one of '%s'",
                $this->container['paymentProvider'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['paymentMethod'] === null) {
            $invalidProperties[] = "'paymentMethod' can't be null";
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['paymentMethod']) && !in_array($this->container['paymentMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paymentMethod', must be one of '%s'",
                $this->container['paymentMethod'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paymentProvider
     *
     * @return string
     */
    public function getPaymentProvider()
    {
        return $this->container['paymentProvider'];
    }

    /**
     * Sets paymentProvider
     *
     * @param string $paymentProvider Payment Provider chosen for the order. </br> Possible values: * **PLAZA** -  Ratepay * **OTTOPAYMENTS** - OTTO Payments
     *
     * @return self
     */
    public function setPaymentProvider($paymentProvider)
    {
        if (is_null($paymentProvider)) {
            throw new \InvalidArgumentException('non-nullable paymentProvider cannot be null');
        }
        $allowedValues = $this->getPaymentProviderAllowableValues();
        if (!in_array($paymentProvider, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paymentProvider', must be one of '%s'",
                    $paymentProvider,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentProvider'] = $paymentProvider;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param string $paymentMethod Payment method chosen by the customer to pay for this order.  Possible values: * **INVOICE_SINGLE / INVOICE_INSTALLMENT** - payment on invoice (with or without installments) * **DIRECT_DEBIT / DIRECT_DEBIT_INSTALLMENTS** - payment by direct debit (with or without installments) * **PREPAYMENT** - payment by prepayment * **PAYPAL** - payment by PayPal * **CREDIT_CARD** - payment by credit or debit card  (only applicable for paymentProvider = OTTOPAYMENTS) * **CREDIT_CARD_ONLINE** - payment by credit card  (only applicable for old paymentProvider = PLAZA)
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        if (is_null($paymentMethod)) {
            throw new \InvalidArgumentException('non-nullable paymentMethod cannot be null');
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($paymentMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paymentMethod', must be one of '%s'",
                    $paymentMethod,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets installmentCount
     *
     * @return int|null
     */
    public function getInstallmentCount()
    {
        return $this->container['installmentCount'];
    }

    /**
     * Sets installmentCount
     *
     * @param int|null $installmentCount For payment methods with installments, this attribute indicates how many installments the customer has chosen when placing the order. </br>Only available on receipts of receiptType PURCHASE. </br>This information is not reliably provided for older receipts
     *
     * @return self
     */
    public function setInstallmentCount($installmentCount)
    {
        if (is_null($installmentCount)) {
            throw new \InvalidArgumentException('non-nullable installmentCount cannot be null');
        }
        $this->container['installmentCount'] = $installmentCount;

        return $this;
    }

    /**
     * Gets paymentBreak
     *
     * @return bool|null
     */
    public function getPaymentBreak()
    {
        return $this->container['paymentBreak'];
    }

    /**
     * Sets paymentBreak
     *
     * @param bool|null $paymentBreak The field indicates whether customer has chosen paymentBreak <ul><li>Set to <b>true</b>, if customer has chose paymentBreak</li><li>Set to <b>false</b>, if customer hasn’t chosen paymentBreak</li></ul>
     *
     * @return self
     */
    public function setPaymentBreak($paymentBreak)
    {
        if (is_null($paymentBreak)) {
            throw new \InvalidArgumentException('non-nullable paymentBreak cannot be null');
        }
        $this->container['paymentBreak'] = $paymentBreak;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


