<?php
/**
 * CreateShippingProfileRequestShippingProfilesV1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * CreateShippingProfileRequestShippingProfilesV1 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateShippingProfileRequestShippingProfilesV1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateShippingProfileRequest__ShippingProfiles-V1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shippingProfileName' => 'string',
        'workingDays' => 'string[]',
        'orderCutoff' => 'string',
        'deliveryType' => 'string',
        'defaultProcessingTime' => 'int',
        'transportTime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shippingProfileName' => null,
        'workingDays' => null,
        'orderCutoff' => 'HH:MM',
        'deliveryType' => null,
        'defaultProcessingTime' => 'int64',
        'transportTime' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shippingProfileName' => false,
        'workingDays' => false,
        'orderCutoff' => false,
        'deliveryType' => false,
        'defaultProcessingTime' => false,
        'transportTime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shippingProfileName' => 'shippingProfileName',
        'workingDays' => 'workingDays',
        'orderCutoff' => 'orderCutoff',
        'deliveryType' => 'deliveryType',
        'defaultProcessingTime' => 'defaultProcessingTime',
        'transportTime' => 'transportTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shippingProfileName' => 'setShippingProfileName',
        'workingDays' => 'setWorkingDays',
        'orderCutoff' => 'setOrderCutoff',
        'deliveryType' => 'setDeliveryType',
        'defaultProcessingTime' => 'setDefaultProcessingTime',
        'transportTime' => 'setTransportTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shippingProfileName' => 'getShippingProfileName',
        'workingDays' => 'getWorkingDays',
        'orderCutoff' => 'getOrderCutoff',
        'deliveryType' => 'getDeliveryType',
        'defaultProcessingTime' => 'getDefaultProcessingTime',
        'transportTime' => 'getTransportTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DELIVERY_TYPE_PARCEL = 'PARCEL';
    public const DELIVERY_TYPE_FORWARDER_PREFERREDLOCATION = 'FORWARDER_PREFERREDLOCATION';
    public const DELIVERY_TYPE_FORWARDER_CURBSIDE = 'FORWARDER_CURBSIDE';
    public const DELIVERY_TYPE_FORWARDER_HEAVYDUTY = 'FORWARDER_HEAVYDUTY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryTypeAllowableValues()
    {
        return [
            self::DELIVERY_TYPE_PARCEL,
            self::DELIVERY_TYPE_FORWARDER_PREFERREDLOCATION,
            self::DELIVERY_TYPE_FORWARDER_CURBSIDE,
            self::DELIVERY_TYPE_FORWARDER_HEAVYDUTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shippingProfileName', $data ?? [], null);
        $this->setIfExists('workingDays', $data ?? [], null);
        $this->setIfExists('orderCutoff', $data ?? [], null);
        $this->setIfExists('deliveryType', $data ?? [], null);
        $this->setIfExists('defaultProcessingTime', $data ?? [], null);
        $this->setIfExists('transportTime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shippingProfileName'] === null) {
            $invalidProperties[] = "'shippingProfileName' can't be null";
        }
        if ($this->container['workingDays'] === null) {
            $invalidProperties[] = "'workingDays' can't be null";
        }
        if ($this->container['orderCutoff'] === null) {
            $invalidProperties[] = "'orderCutoff' can't be null";
        }
        if ($this->container['deliveryType'] === null) {
            $invalidProperties[] = "'deliveryType' can't be null";
        }
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!is_null($this->container['deliveryType']) && !in_array($this->container['deliveryType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deliveryType', must be one of '%s'",
                $this->container['deliveryType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['defaultProcessingTime'] === null) {
            $invalidProperties[] = "'defaultProcessingTime' can't be null";
        }
        if (($this->container['defaultProcessingTime'] > 99)) {
            $invalidProperties[] = "invalid value for 'defaultProcessingTime', must be smaller than or equal to 99.";
        }

        if (($this->container['defaultProcessingTime'] < 1)) {
            $invalidProperties[] = "invalid value for 'defaultProcessingTime', must be bigger than or equal to 1.";
        }

        if ($this->container['transportTime'] === null) {
            $invalidProperties[] = "'transportTime' can't be null";
        }
        if (($this->container['transportTime'] > 99)) {
            $invalidProperties[] = "invalid value for 'transportTime', must be smaller than or equal to 99.";
        }

        if (($this->container['transportTime'] < 1)) {
            $invalidProperties[] = "invalid value for 'transportTime', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shippingProfileName
     *
     * @return string
     */
    public function getShippingProfileName()
    {
        return $this->container['shippingProfileName'];
    }

    /**
     * Sets shippingProfileName
     *
     * @param string $shippingProfileName ShippingProfileName allows the partner to assign a descriptive and unique name  for a shipping profile
     *
     * @return self
     */
    public function setShippingProfileName($shippingProfileName)
    {
        if (is_null($shippingProfileName)) {
            throw new \InvalidArgumentException('non-nullable shippingProfileName cannot be null');
        }
        $this->container['shippingProfileName'] = $shippingProfileName;

        return $this;
    }

    /**
     * Gets workingDays
     *
     * @return string[]
     */
    public function getWorkingDays()
    {
        return $this->container['workingDays'];
    }

    /**
     * Sets workingDays
     *
     * @param string[] $workingDays WorkingDays describe the specific days of the week on which the partner is available to process orders
     *
     * @return self
     */
    public function setWorkingDays($workingDays)
    {
        if (is_null($workingDays)) {
            throw new \InvalidArgumentException('non-nullable workingDays cannot be null');
        }
        $this->container['workingDays'] = $workingDays;

        return $this;
    }

    /**
     * Gets orderCutoff
     *
     * @return string
     */
    public function getOrderCutoff()
    {
        return $this->container['orderCutoff'];
    }

    /**
     * Sets orderCutoff
     *
     * @param string $orderCutoff OrderCutoff specifies the time for orders to be placed, so the ProcessingTime starts within the same day. <br> This must be in half hour duration in (HH:MM) 24 hours format. The cut-off time must be specified in CET time.
     *
     * @return self
     */
    public function setOrderCutoff($orderCutoff)
    {
        if (is_null($orderCutoff)) {
            throw new \InvalidArgumentException('non-nullable orderCutoff cannot be null');
        }
        $this->container['orderCutoff'] = $orderCutoff;

        return $this;
    }

    /**
     * Gets deliveryType
     *
     * @return string
     */
    public function getDeliveryType()
    {
        return $this->container['deliveryType'];
    }

    /**
     * Sets deliveryType
     *
     * @param string $deliveryType DeliveryType describes how the product is being shipped. At the moment we support the enums shown above
     *
     * @return self
     */
    public function setDeliveryType($deliveryType)
    {
        if (is_null($deliveryType)) {
            throw new \InvalidArgumentException('non-nullable deliveryType cannot be null');
        }
        $allowedValues = $this->getDeliveryTypeAllowableValues();
        if (!in_array($deliveryType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deliveryType', must be one of '%s'",
                    $deliveryType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deliveryType'] = $deliveryType;

        return $this;
    }

    /**
     * Gets defaultProcessingTime
     *
     * @return int
     */
    public function getDefaultProcessingTime()
    {
        return $this->container['defaultProcessingTime'];
    }

    /**
     * Sets defaultProcessingTime
     *
     * @param int $defaultProcessingTime DefaultProcessingTime describes the time the partner needs to prepare the order for a shipment. Must be between 1 to 99. <br> If more than 72 days are transmitted in the DefaultProcessingTime, the product is marked as sold out on otto.de and cannot be ordered. <br> This is also the case if the DefaultProcessingTime and TransportTime add up to a value greater than 72. \"1\" day is considered as same-day shipping (0 days) until the cut-off time is reached.
     *
     * @return self
     */
    public function setDefaultProcessingTime($defaultProcessingTime)
    {
        if (is_null($defaultProcessingTime)) {
            throw new \InvalidArgumentException('non-nullable defaultProcessingTime cannot be null');
        }

        if (($defaultProcessingTime > 99)) {
            throw new \InvalidArgumentException('invalid value for $defaultProcessingTime when calling CreateShippingProfileRequestShippingProfilesV1., must be smaller than or equal to 99.');
        }
        if (($defaultProcessingTime < 1)) {
            throw new \InvalidArgumentException('invalid value for $defaultProcessingTime when calling CreateShippingProfileRequestShippingProfilesV1., must be bigger than or equal to 1.');
        }

        $this->container['defaultProcessingTime'] = $defaultProcessingTime;

        return $this;
    }

    /**
     * Gets transportTime
     *
     * @return int
     */
    public function getTransportTime()
    {
        return $this->container['transportTime'];
    }

    /**
     * Sets transportTime
     *
     * @param int $transportTime TransportTime describes the time the carrier needs from collecting the order from partners warehouse until the first delivery attempt. Must be between 1 to 99. <br> If more than 72 days are transmitted in the TransportTime, the product is marked as sold out on otto.de and cannot be ordered. <br> This is also the case if the DefaultProcessingTime and TransportTime add up to a value greater than 72.
     *
     * @return self
     */
    public function setTransportTime($transportTime)
    {
        if (is_null($transportTime)) {
            throw new \InvalidArgumentException('non-nullable transportTime cannot be null');
        }

        if (($transportTime > 99)) {
            throw new \InvalidArgumentException('invalid value for $transportTime when calling CreateShippingProfileRequestShippingProfilesV1., must be smaller than or equal to 99.');
        }
        if (($transportTime < 1)) {
            throw new \InvalidArgumentException('invalid value for $transportTime when calling CreateShippingProfileRequestShippingProfilesV1., must be bigger than or equal to 1.');
        }

        $this->container['transportTime'] = $transportTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


