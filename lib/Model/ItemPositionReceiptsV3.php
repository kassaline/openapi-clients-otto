<?php
/**
 * ItemPositionReceiptsV3
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * ItemPositionReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description List of billed items, if exists. &lt;/br&gt;This list is only used in context of receiptType PURCHASE or REFUND. &lt;/br&gt;If there are no entries the lists is displayed as empty
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemPositionReceiptsV3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemPosition__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lineNumber' => 'int',
        'sku' => 'string',
        'expectedPerformancePeriod' => 'string',
        'articleNumber' => 'string',
        'productTitle' => 'string',
        'variationAttributes' => 'string',
        'positionItemIds' => 'string[]',
        'quantity' => 'int',
        'unitPrice' => '\OpenAPI\Client\Otto\Model\PriceReceiptsV3',
        'priceToPayPerPositionItems' => '\OpenAPI\Client\Otto\Model\PriceToPayPerPositionItemReceiptsV3[]',
        'positionSum' => '\OpenAPI\Client\Otto\Model\PriceReceiptsV3',
        'priceModifications' => '\OpenAPI\Client\Otto\Model\PriceModificationReceiptsV3[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lineNumber' => 'int32',
        'sku' => null,
        'expectedPerformancePeriod' => null,
        'articleNumber' => null,
        'productTitle' => null,
        'variationAttributes' => null,
        'positionItemIds' => null,
        'quantity' => 'int32',
        'unitPrice' => null,
        'priceToPayPerPositionItems' => null,
        'positionSum' => null,
        'priceModifications' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lineNumber' => false,
        'sku' => false,
        'expectedPerformancePeriod' => false,
        'articleNumber' => false,
        'productTitle' => false,
        'variationAttributes' => false,
        'positionItemIds' => false,
        'quantity' => false,
        'unitPrice' => false,
        'priceToPayPerPositionItems' => false,
        'positionSum' => false,
        'priceModifications' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lineNumber' => 'lineNumber',
        'sku' => 'sku',
        'expectedPerformancePeriod' => 'expectedPerformancePeriod',
        'articleNumber' => 'articleNumber',
        'productTitle' => 'productTitle',
        'variationAttributes' => 'variationAttributes',
        'positionItemIds' => 'positionItemIds',
        'quantity' => 'quantity',
        'unitPrice' => 'unitPrice',
        'priceToPayPerPositionItems' => 'priceToPayPerPositionItems',
        'positionSum' => 'positionSum',
        'priceModifications' => 'priceModifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lineNumber' => 'setLineNumber',
        'sku' => 'setSku',
        'expectedPerformancePeriod' => 'setExpectedPerformancePeriod',
        'articleNumber' => 'setArticleNumber',
        'productTitle' => 'setProductTitle',
        'variationAttributes' => 'setVariationAttributes',
        'positionItemIds' => 'setPositionItemIds',
        'quantity' => 'setQuantity',
        'unitPrice' => 'setUnitPrice',
        'priceToPayPerPositionItems' => 'setPriceToPayPerPositionItems',
        'positionSum' => 'setPositionSum',
        'priceModifications' => 'setPriceModifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lineNumber' => 'getLineNumber',
        'sku' => 'getSku',
        'expectedPerformancePeriod' => 'getExpectedPerformancePeriod',
        'articleNumber' => 'getArticleNumber',
        'productTitle' => 'getProductTitle',
        'variationAttributes' => 'getVariationAttributes',
        'positionItemIds' => 'getPositionItemIds',
        'quantity' => 'getQuantity',
        'unitPrice' => 'getUnitPrice',
        'priceToPayPerPositionItems' => 'getPriceToPayPerPositionItems',
        'positionSum' => 'getPositionSum',
        'priceModifications' => 'getPriceModifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('lineNumber', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('expectedPerformancePeriod', $data ?? [], null);
        $this->setIfExists('articleNumber', $data ?? [], null);
        $this->setIfExists('productTitle', $data ?? [], null);
        $this->setIfExists('variationAttributes', $data ?? [], null);
        $this->setIfExists('positionItemIds', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('unitPrice', $data ?? [], null);
        $this->setIfExists('priceToPayPerPositionItems', $data ?? [], null);
        $this->setIfExists('positionSum', $data ?? [], null);
        $this->setIfExists('priceModifications', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['articleNumber'] === null) {
            $invalidProperties[] = "'articleNumber' can't be null";
        }
        if ($this->container['productTitle'] === null) {
            $invalidProperties[] = "'productTitle' can't be null";
        }
        if ($this->container['positionItemIds'] === null) {
            $invalidProperties[] = "'positionItemIds' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['unitPrice'] === null) {
            $invalidProperties[] = "'unitPrice' can't be null";
        }
        if ($this->container['positionSum'] === null) {
            $invalidProperties[] = "'positionSum' can't be null";
        }
        if ($this->container['priceModifications'] === null) {
            $invalidProperties[] = "'priceModifications' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lineNumber
     *
     * @return int|null
     */
    public function getLineNumber()
    {
        return $this->container['lineNumber'];
    }

    /**
     * Sets lineNumber
     *
     * @param int|null $lineNumber Number of line item in which the information is printed on the pdf document. </br>This information is not reliably provided for older receipts
     *
     * @return self
     */
    public function setLineNumber($lineNumber)
    {
        if (is_null($lineNumber)) {
            throw new \InvalidArgumentException('non-nullable lineNumber cannot be null');
        }
        $this->container['lineNumber'] = $lineNumber;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Stock keeping unit of item. Unique item identifier on partner side. </br>This information is not reliably provided for older receipts
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets expectedPerformancePeriod
     *
     * @return string|null
     */
    public function getExpectedPerformancePeriod()
    {
        return $this->container['expectedPerformancePeriod'];
    }

    /**
     * Sets expectedPerformancePeriod
     *
     * @param string|null $expectedPerformancePeriod Vague performance date. As the exact date is not known when generating the receipt, this information gives an indication when the item will be shipped
     *
     * @return self
     */
    public function setExpectedPerformancePeriod($expectedPerformancePeriod)
    {
        if (is_null($expectedPerformancePeriod)) {
            throw new \InvalidArgumentException('non-nullable expectedPerformancePeriod cannot be null');
        }
        $this->container['expectedPerformancePeriod'] = $expectedPerformancePeriod;

        return $this;
    }

    /**
     * Gets articleNumber
     *
     * @return string
     */
    public function getArticleNumber()
    {
        return $this->container['articleNumber'];
    }

    /**
     * Sets articleNumber
     *
     * @param string $articleNumber Unique Identifier of item the customer knows from order process.  ATTENTION: Different from the previous version, the field also contains the promotion. In last version the promotion was provided separately
     *
     * @return self
     */
    public function setArticleNumber($articleNumber)
    {
        if (is_null($articleNumber)) {
            throw new \InvalidArgumentException('non-nullable articleNumber cannot be null');
        }
        $this->container['articleNumber'] = $articleNumber;

        return $this;
    }

    /**
     * Gets productTitle
     *
     * @return string
     */
    public function getProductTitle()
    {
        return $this->container['productTitle'];
    }

    /**
     * Sets productTitle
     *
     * @param string $productTitle Product description of item the customer knows from the order process
     *
     * @return self
     */
    public function setProductTitle($productTitle)
    {
        if (is_null($productTitle)) {
            throw new \InvalidArgumentException('non-nullable productTitle cannot be null');
        }
        $this->container['productTitle'] = $productTitle;

        return $this;
    }

    /**
     * Gets variationAttributes
     *
     * @return string|null
     */
    public function getVariationAttributes()
    {
        return $this->container['variationAttributes'];
    }

    /**
     * Sets variationAttributes
     *
     * @param string|null $variationAttributes Additional attributes for unique description of an item, if different variants of the item are possible. (String of comma seperated dimensions)  ATTENTION: In previous version the information was called dimensions
     *
     * @return self
     */
    public function setVariationAttributes($variationAttributes)
    {
        if (is_null($variationAttributes)) {
            throw new \InvalidArgumentException('non-nullable variationAttributes cannot be null');
        }
        $this->container['variationAttributes'] = $variationAttributes;

        return $this;
    }

    /**
     * Gets positionItemIds
     *
     * @return string[]
     */
    public function getPositionItemIds()
    {
        return $this->container['positionItemIds'];
    }

    /**
     * Sets positionItemIds
     *
     * @param string[] $positionItemIds List of unique identifiers of specific instances of ordered items. A (salesOrder)PositionItem is the smallest unit of an item that can be ordered. </br>If quantity of the specific LineItem object is bigger than one the list contains more than one entry
     *
     * @return self
     */
    public function setPositionItemIds($positionItemIds)
    {
        if (is_null($positionItemIds)) {
            throw new \InvalidArgumentException('non-nullable positionItemIds cannot be null');
        }
        $this->container['positionItemIds'] = $positionItemIds;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return \OpenAPI\Client\Otto\Model\PriceReceiptsV3
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param \OpenAPI\Client\Otto\Model\PriceReceiptsV3 $unitPrice unitPrice
     *
     * @return self
     */
    public function setUnitPrice($unitPrice)
    {
        if (is_null($unitPrice)) {
            throw new \InvalidArgumentException('non-nullable unitPrice cannot be null');
        }
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets priceToPayPerPositionItems
     *
     * @return \OpenAPI\Client\Otto\Model\PriceToPayPerPositionItemReceiptsV3[]|null
     */
    public function getPriceToPayPerPositionItems()
    {
        return $this->container['priceToPayPerPositionItems'];
    }

    /**
     * Sets priceToPayPerPositionItems
     *
     * @param \OpenAPI\Client\Otto\Model\PriceToPayPerPositionItemReceiptsV3[]|null $priceToPayPerPositionItems Price of each unit of the item i.e., price of each positionItemId.</br>It will be available only for PURCHASE receipt
     *
     * @return self
     */
    public function setPriceToPayPerPositionItems($priceToPayPerPositionItems)
    {
        if (is_null($priceToPayPerPositionItems)) {
            throw new \InvalidArgumentException('non-nullable priceToPayPerPositionItems cannot be null');
        }
        $this->container['priceToPayPerPositionItems'] = $priceToPayPerPositionItems;

        return $this;
    }

    /**
     * Gets positionSum
     *
     * @return \OpenAPI\Client\Otto\Model\PriceReceiptsV3
     */
    public function getPositionSum()
    {
        return $this->container['positionSum'];
    }

    /**
     * Sets positionSum
     *
     * @param \OpenAPI\Client\Otto\Model\PriceReceiptsV3 $positionSum positionSum
     *
     * @return self
     */
    public function setPositionSum($positionSum)
    {
        if (is_null($positionSum)) {
            throw new \InvalidArgumentException('non-nullable positionSum cannot be null');
        }
        $this->container['positionSum'] = $positionSum;

        return $this;
    }

    /**
     * Gets priceModifications
     *
     * @return \OpenAPI\Client\Otto\Model\PriceModificationReceiptsV3[]
     */
    public function getPriceModifications()
    {
        return $this->container['priceModifications'];
    }

    /**
     * Sets priceModifications
     *
     * @param \OpenAPI\Client\Otto\Model\PriceModificationReceiptsV3[] $priceModifications List of additional fees and reductions represented as price modifications. </br>Currently we only know reductions. </br>If there are no entries the list is displayed as empty
     *
     * @return self
     */
    public function setPriceModifications($priceModifications)
    {
        if (is_null($priceModifications)) {
            throw new \InvalidArgumentException('non-nullable priceModifications cannot be null');
        }
        $this->container['priceModifications'] = $priceModifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


