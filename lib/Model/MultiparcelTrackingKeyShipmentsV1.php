<?php
/**
 * MultiparcelTrackingKeyShipmentsV1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * MultiparcelTrackingKeyShipmentsV1 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MultiparcelTrackingKeyShipmentsV1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MultiparcelTrackingKey__Shipments-V1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carrier' => 'string',
        'trackingNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'carrier' => null,
        'trackingNumber' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'carrier' => false,
        'trackingNumber' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier' => 'carrier',
        'trackingNumber' => 'trackingNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier' => 'setCarrier',
        'trackingNumber' => 'setTrackingNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier' => 'getCarrier',
        'trackingNumber' => 'getTrackingNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CARRIER_DHL = 'DHL';
    public const CARRIER_DHL_EXPRESS = 'DHL_EXPRESS';
    public const CARRIER_DHL_FREIGHT = 'DHL_FREIGHT';
    public const CARRIER_DHL_HOME_DELIVERY = 'DHL_HOME_DELIVERY';
    public const CARRIER_GLS = 'GLS';
    public const CARRIER_HERMES = 'HERMES';
    public const CARRIER_DPD = 'DPD';
    public const CARRIER_UPS = 'UPS';
    public const CARRIER_BTW = 'BTW';
    public const CARRIER_BURSPED = 'BURSPED';
    public const CARRIER_CARGOLINE = 'CARGOLINE';
    public const CARRIER_DACHSER = 'DACHSER';
    public const CARRIER_DB_SCHENKER = 'DB_SCHENKER';
    public const CARRIER_DSV = 'DSV';
    public const CARRIER_EMONS = 'EMONS';
    public const CARRIER_EPH_DIREKT = 'EPH_DIREKT';
    public const CARRIER_IDS = 'IDS';
    public const CARRIER_GEIS = 'GEIS';
    public const CARRIER_GEL = 'GEL';
    public const CARRIER_GUETTLER = 'GUETTLER';
    public const CARRIER_HES = 'HES';
    public const CARRIER_HELLMANN = 'HELLMANN';
    public const CARRIER_HEUEL = 'HEUEL';
    public const CARRIER_KOCH = 'KOCH';
    public const CARRIER_KUEHNE_NAGEL = 'KUEHNE_NAGEL';
    public const CARRIER_LOGWIN = 'LOGWIN';
    public const CARRIER_MEYER_JUMBO = 'MEYER_JUMBO';
    public const CARRIER_RABEN_LOGISTIK = 'RABEN_LOGISTIK';
    public const CARRIER_RHENUS = 'RHENUS';
    public const CARRIER_REIMER = 'REIMER';
    public const CARRIER_REITHMEIER = 'REITHMEIER';
    public const CARRIER_SCHOCKEMOEHLE = 'SCHOCKEMOEHLE';
    public const CARRIER_SCHMIDT_GEVELSBERG = 'SCHMIDT_GEVELSBERG';
    public const CARRIER_ZUFALL = 'ZUFALL';
    public const CARRIER_OTHER_FORWARDER = 'OTHER_FORWARDER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCarrierAllowableValues()
    {
        return [
            self::CARRIER_DHL,
            self::CARRIER_DHL_EXPRESS,
            self::CARRIER_DHL_FREIGHT,
            self::CARRIER_DHL_HOME_DELIVERY,
            self::CARRIER_GLS,
            self::CARRIER_HERMES,
            self::CARRIER_DPD,
            self::CARRIER_UPS,
            self::CARRIER_BTW,
            self::CARRIER_BURSPED,
            self::CARRIER_CARGOLINE,
            self::CARRIER_DACHSER,
            self::CARRIER_DB_SCHENKER,
            self::CARRIER_DSV,
            self::CARRIER_EMONS,
            self::CARRIER_EPH_DIREKT,
            self::CARRIER_IDS,
            self::CARRIER_GEIS,
            self::CARRIER_GEL,
            self::CARRIER_GUETTLER,
            self::CARRIER_HES,
            self::CARRIER_HELLMANN,
            self::CARRIER_HEUEL,
            self::CARRIER_KOCH,
            self::CARRIER_KUEHNE_NAGEL,
            self::CARRIER_LOGWIN,
            self::CARRIER_MEYER_JUMBO,
            self::CARRIER_RABEN_LOGISTIK,
            self::CARRIER_RHENUS,
            self::CARRIER_REIMER,
            self::CARRIER_REITHMEIER,
            self::CARRIER_SCHOCKEMOEHLE,
            self::CARRIER_SCHMIDT_GEVELSBERG,
            self::CARRIER_ZUFALL,
            self::CARRIER_OTHER_FORWARDER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('trackingNumber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['carrier'] === null) {
            $invalidProperties[] = "'carrier' can't be null";
        }
        $allowedValues = $this->getCarrierAllowableValues();
        if (!is_null($this->container['carrier']) && !in_array($this->container['carrier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'carrier', must be one of '%s'",
                $this->container['carrier'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['trackingNumber'] === null) {
            $invalidProperties[] = "'trackingNumber' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier
     *
     * @return string
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string $carrier The carrier of the shipment.
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $allowedValues = $this->getCarrierAllowableValues();
        if (!in_array($carrier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'carrier', must be one of '%s'",
                    $carrier,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets trackingNumber
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['trackingNumber'];
    }

    /**
     * Sets trackingNumber
     *
     * @param string $trackingNumber The tracking number assigned by the carrier. <br> Required for parcel deliveries.
     *
     * @return self
     */
    public function setTrackingNumber($trackingNumber)
    {
        if (is_null($trackingNumber)) {
            throw new \InvalidArgumentException('non-nullable trackingNumber cannot be null');
        }
        $this->container['trackingNumber'] = $trackingNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


