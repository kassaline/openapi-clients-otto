<?php
/**
 * DetailsReceiptsV3
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTTO Market API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Otto\Model;

use \ArrayAccess;
use \OpenAPI\Client\Otto\ObjectSerializer;

/**
 * DetailsReceiptsV3 Class Doc Comment
 *
 * @category Class
 * @description Additional information of increase or decrease of the line item described by this PriceModification object
 * @package  OpenAPI\Client\Otto
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DetailsReceiptsV3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Details__Receipts-V3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'id' => 'string',
        'linkedReceiptNumber' => 'string',
        'linkedReceiptCreationDate' => '\DateTime',
        'type' => 'string',
        'reason' => 'string',
        'linkedPositionItemId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'id' => null,
        'linkedReceiptNumber' => null,
        'linkedReceiptCreationDate' => 'date-time',
        'type' => null,
        'reason' => null,
        'linkedPositionItemId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'id' => false,
        'linkedReceiptNumber' => false,
        'linkedReceiptCreationDate' => false,
        'type' => false,
        'reason' => false,
        'linkedPositionItemId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'id' => 'id',
        'linkedReceiptNumber' => 'linkedReceiptNumber',
        'linkedReceiptCreationDate' => 'linkedReceiptCreationDate',
        'type' => 'type',
        'reason' => 'reason',
        'linkedPositionItemId' => 'linkedPositionItemId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'id' => 'setId',
        'linkedReceiptNumber' => 'setLinkedReceiptNumber',
        'linkedReceiptCreationDate' => 'setLinkedReceiptCreationDate',
        'type' => 'setType',
        'reason' => 'setReason',
        'linkedPositionItemId' => 'setLinkedPositionItemId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'id' => 'getId',
        'linkedReceiptNumber' => 'getLinkedReceiptNumber',
        'linkedReceiptCreationDate' => 'getLinkedReceiptCreationDate',
        'type' => 'getType',
        'reason' => 'getReason',
        'linkedPositionItemId' => 'getLinkedPositionItemId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_PARTNER_DISCOUNT = 'PARTNER_DISCOUNT';
    public const TYPE_PLATFORM_DISCOUNT = 'PLATFORM_DISCOUNT';
    public const REASON_GOODWILL_ITEM_FOR_FREE = 'GOODWILL_ITEM_FOR_FREE';
    public const REASON_GOODWILL_ITEM_RETURN_REJECTED = 'GOODWILL_ITEM_RETURN_REJECTED';
    public const REASON_GOODWILL_ITEM_DISCOUNT_EXPIRED = 'GOODWILL_ITEM_DISCOUNT_EXPIRED';
    public const REASON_GOODWILL_OTHER = 'GOODWILL_OTHER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PARTNER_DISCOUNT,
            self::TYPE_PLATFORM_DISCOUNT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_GOODWILL_ITEM_FOR_FREE,
            self::REASON_GOODWILL_ITEM_RETURN_REJECTED,
            self::REASON_GOODWILL_ITEM_DISCOUNT_EXPIRED,
            self::REASON_GOODWILL_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('linkedReceiptNumber', $data ?? [], null);
        $this->setIfExists('linkedReceiptCreationDate', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('linkedPositionItemId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reason', must be one of '%s'",
                $this->container['reason'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Additional info often printed on the pdf for a PriceModification object (on German receipts always in German)</br> If PriceModification object is of type: * **PARTNER_DISCOUNT** - discount name, provided with sales order event as part of positionGroupPrice: (What we print on the pdf ): e.g.  \"1 € Rabatt\" * **DEFECT_COMPENSATION** - ( German translation of defect compensation)  \"**Mängelausgleich**\" * **REFUND_COMPLAINT_ITEM** - hard coded \"Preisnachlass Reklamation Artikel\" * **REFUND_PAYPAL_DISPUTE** - hard coded “Preisnachlass PayPal Disput“ * **REFUND_ESCALATION** - hard coded “Preisnachlass Escalation“ * **REFUND_CREDIT_CARD_DISPUTE** - hard coded \"Preisnachlass CREDIT_CARD Disput\"
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Discount code applied to the order to get a reduction. Available when reduction is of type PARTNER_DISCOUNT
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets linkedReceiptNumber
     *
     * @return string|null
     */
    public function getLinkedReceiptNumber()
    {
        return $this->container['linkedReceiptNumber'];
    }

    /**
     * Sets linkedReceiptNumber
     *
     * @param string|null $linkedReceiptNumber Allows to link an earlier purchase or (partial)refund receipt by human-readable identifier. </br>If PriceModification object is of type: * **DEFECT_COMPENSATION**: In case of previous (partial) refunds this field contains the human-readable identifier of the partial refund with which the previous refund was made
     *
     * @return self
     */
    public function setLinkedReceiptNumber($linkedReceiptNumber)
    {
        if (is_null($linkedReceiptNumber)) {
            throw new \InvalidArgumentException('non-nullable linkedReceiptNumber cannot be null');
        }
        $this->container['linkedReceiptNumber'] = $linkedReceiptNumber;

        return $this;
    }

    /**
     * Gets linkedReceiptCreationDate
     *
     * @return \DateTime|null
     */
    public function getLinkedReceiptCreationDate()
    {
        return $this->container['linkedReceiptCreationDate'];
    }

    /**
     * Sets linkedReceiptCreationDate
     *
     * @param \DateTime|null $linkedReceiptCreationDate Allows to show creation date of linked earlier purchase or (partial)refund receipt. </br>If PriceModification object is of type: * **DEFECT_COMPENSATION**: In case of previous (partial) refunds this field contains the creation date of linked receipt with which the previous refund was made. (ISO-8601 format)
     *
     * @return self
     */
    public function setLinkedReceiptCreationDate($linkedReceiptCreationDate)
    {
        if (is_null($linkedReceiptCreationDate)) {
            throw new \InvalidArgumentException('non-nullable linkedReceiptCreationDate cannot be null');
        }
        $this->container['linkedReceiptCreationDate'] = $linkedReceiptCreationDate;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The specific types of discounts provided for Marketplace. This field is only applicable when the priceModificationType for the item is PARTNER_DISCOUNT </br>Possible values: * **PARTNER_DISCOUNT** - a Partner Discount provided because of a booked service \"Rabattaktion\" by the partner * **PLATFORM_DISCOUNT** - a Discount for a platform frame provided because of a booked service \"Marktplatz Rabattaktion\" by the partner
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason Detailed reason of priceModifications of priceModificationType REFUND_GOODWILL_ITEM.  Possible values: * **GOODWILL_ITEM_FOR_FREE** - Refund item price as goodwill * **GOODWILL_ITEM_RETURN_REJECTED** - Price reduction after return rejection as goodwill * **GOODWILL_ITEM_DISCOUNT_EXPIRED** - Price reduction after using old discount code as goodwill * **GOODWILL_OTHER** - Individual price reduction as goodwill
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $allowedValues = $this->getReasonAllowableValues();
        if (!in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reason', must be one of '%s'",
                    $reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets linkedPositionItemId
     *
     * @return string|null
     */
    public function getLinkedPositionItemId()
    {
        return $this->container['linkedPositionItemId'];
    }

    /**
     * Sets linkedPositionItemId
     *
     * @param string|null $linkedPositionItemId Allows to show the unique identifier (salesOrder)PositionItem of an earlier (partial)refund receipt of items.</br> A (salesOrder)PositionItem is the smallest unit of an item that can be ordered.  It will be present in refund receipts for those _“priceModificationType” which are applicable after purchase receipts are generated_.
     *
     * @return self
     */
    public function setLinkedPositionItemId($linkedPositionItemId)
    {
        if (is_null($linkedPositionItemId)) {
            throw new \InvalidArgumentException('non-nullable linkedPositionItemId cannot be null');
        }
        $this->container['linkedPositionItemId'] = $linkedPositionItemId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


